{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Computer Networks And Distributed Applications \u00b6 This site provides documentation and Resources for students participating in INFO 314 : \"Computer Networks And Distributed Applications\" . Class documentation and troubleshooting will be slowly added to this website in order to better support students with their assignments. If you notice a problem with the content presented here, please file an issue on the GitHub project repository . 1 Important Links \u00b6 INFO 314 Canvas HomePage Github Project Tutorials Curious on how to develop something similar to this? Follow instructions on how to setup your own MkDocs here . \u21a9","title":"Home"},{"location":"#computer-networks-and-distributed-applications","text":"This site provides documentation and Resources for students participating in INFO 314 : \"Computer Networks And Distributed Applications\" . Class documentation and troubleshooting will be slowly added to this website in order to better support students with their assignments. If you notice a problem with the content presented here, please file an issue on the GitHub project repository . 1","title":"Computer Networks And Distributed Applications"},{"location":"#important-links","text":"INFO 314 Canvas HomePage Github Project Tutorials Curious on how to develop something similar to this? Follow instructions on how to setup your own MkDocs here . \u21a9","title":"Important Links"},{"location":"assignments/","text":"Assignment Template \u00b6 This is the general assignment template for our quarter. For each of your assignments we expect you to follow the following format and rules below. Points may be taken off otherwise. Project #-1 \u00b6 Student name : first and last Formatting \u00b6 Formatting Use code blocks when copy pasting large amounts of terminal output or code into your markdown file. You are expected to turn in work that is formatted and readable. All Github reports and answers should be done in the repo's README.md file. Late submissions If you intend on using a late day add a comment to your submission that describes how many you wish to use. More details about late days on the Canvas syllabus. If you re-commit to your repo please re-submit on Canvas. Late commits will use your late days. Deliverables \u00b6 Question -1: It is recommended that you bold the questions. This makes it easier to differentiate your answer from the question. After which you can put your answer below. Question -2: Whether lab, or a project, it is required that you you copy paste the question you are answering. Doing so will ensure that you are answering all questions and accelerates the process of grading.","title":"Assignment Template"},{"location":"assignments/#assignment-template","text":"This is the general assignment template for our quarter. For each of your assignments we expect you to follow the following format and rules below. Points may be taken off otherwise.","title":"Assignment Template"},{"location":"assignments/#project-1","text":"Student name : first and last","title":"Project #-1"},{"location":"assignments/#formatting","text":"Formatting Use code blocks when copy pasting large amounts of terminal output or code into your markdown file. You are expected to turn in work that is formatted and readable. All Github reports and answers should be done in the repo's README.md file. Late submissions If you intend on using a late day add a comment to your submission that describes how many you wish to use. More details about late days on the Canvas syllabus. If you re-commit to your repo please re-submit on Canvas. Late commits will use your late days.","title":"Formatting"},{"location":"assignments/#deliverables","text":"Question -1: It is recommended that you bold the questions. This makes it easier to differentiate your answer from the question. After which you can put your answer below. Question -2: Whether lab, or a project, it is required that you you copy paste the question you are answering. Doing so will ensure that you are answering all questions and accelerates the process of grading.","title":"Deliverables"},{"location":"contact/","text":"Asking teaching staff for help As teaching staff, both the instructor and the teaching assistant are here to help you as much as possible. We will both be available on Slack for questions. Nevertheless it is expected that you will have attempted to solve the issue as much as possible before reaching out for help. Below are some guidelines: When should I reach out? You should reach out for help if you have: Written down what your problem is Written down why you think you are seeing this behavior Completed your own debugging Completed your own research How should I ask? It is highly encourages that you ask your questions in a Slack Channel. You will get a response back much more quickly either from a student are teaching staff this way. In your message explain the problem and what you have tried so far.","title":"Contact"},{"location":"assignments/Lab 3 Report/","text":"Lab 3 Report - Analyze DNS & HTTP in Wireshark \u00b6 INFO 314 DATE: NAME: Overview \u00b6 The purpose of this lab is for students to gain hands on experience with DNS. By the end of the lab you will be familiar with: dig DNS queries security faults of DNS We highly recommend using search engines to help you find solutions. Part I - Website \u00b6 What website did you select? Part II - dig \u00b6 What addresses did the dig command return? Copy dig results to your report (code block or screenshot). What did you observe when you browsed to the IP addresses directly? Aside from A records containing IP addresses, did you discover any other DNS records from your query? List at least 3 other record types that DNS manages. Look closely at the output of the dig command. How can you be sure that the query completed successfully? Identify the IP address of the server used to handle your query. Part III - Dev Tools \u00b6 From a quick glance what is the most common file type requested? Approximately how many domains do you see in that list that don't matchup with the website domain you initially visited? Why do you think this page is getting information from other websites? If you had to guess, how many DNS requests do you think were sent in order to fully load this page? Part IV - Wireshark \u00b6 Assuming almost all of the DNS requests you see in Wireshark right now are for the one website you visited, how many DNS requests do you see? Overall were there less or more DNS queries than you'd expect? How did you identify the DNS packet(s) associated with the website you visited? Provide screenshot(s) of the packet(s) (specifically of the DNS information in Packet Details). List the IP addresses you received for the website from the DNS server that resolved your request. Which transport layer protocol (think OSI model) is used to carry the DNS packet? Compare this DNS response to others in the capture (generate more if needed). Which port number(s) are shared in common across these DNS requests? Part V - Security \u00b6 Examine the bytes view of the two packets. Do you see any human readable values in the output? Looking at these two packets and others in your capture, does Wireshark provide any clues about whether or not your DNS is encrypted? Does it provide any clues on whether your web traffic is encrypted? Attacker: What information might an outside observer be able to glean about your computing activities by capturing your DNS traffic? Was any discernible information revealed (as far as you can tell) through your web traffic? Deliverables \u00b6 For your deliverable, you will need to submit one file Canvas under the Assignment \"Lab 3 - Analyze DNS & HTTP in Wireshark\". This completed lab report (preferably in PDF format)","title":"Lab 3 Report - Analyze DNS & HTTP in Wireshark"},{"location":"assignments/Lab 3 Report/#lab-3-report-analyze-dns-http-in-wireshark","text":"INFO 314 DATE: NAME:","title":"Lab 3 Report - Analyze DNS &amp; HTTP in Wireshark"},{"location":"assignments/Lab 3 Report/#overview","text":"The purpose of this lab is for students to gain hands on experience with DNS. By the end of the lab you will be familiar with: dig DNS queries security faults of DNS We highly recommend using search engines to help you find solutions.","title":"Overview"},{"location":"assignments/Lab 3 Report/#part-i-website","text":"What website did you select?","title":"Part I - Website"},{"location":"assignments/Lab 3 Report/#part-ii-dig","text":"What addresses did the dig command return? Copy dig results to your report (code block or screenshot). What did you observe when you browsed to the IP addresses directly? Aside from A records containing IP addresses, did you discover any other DNS records from your query? List at least 3 other record types that DNS manages. Look closely at the output of the dig command. How can you be sure that the query completed successfully? Identify the IP address of the server used to handle your query.","title":"Part II - dig"},{"location":"assignments/Lab 3 Report/#part-iii-dev-tools","text":"From a quick glance what is the most common file type requested? Approximately how many domains do you see in that list that don't matchup with the website domain you initially visited? Why do you think this page is getting information from other websites? If you had to guess, how many DNS requests do you think were sent in order to fully load this page?","title":"Part III - Dev Tools"},{"location":"assignments/Lab 3 Report/#part-iv-wireshark","text":"Assuming almost all of the DNS requests you see in Wireshark right now are for the one website you visited, how many DNS requests do you see? Overall were there less or more DNS queries than you'd expect? How did you identify the DNS packet(s) associated with the website you visited? Provide screenshot(s) of the packet(s) (specifically of the DNS information in Packet Details). List the IP addresses you received for the website from the DNS server that resolved your request. Which transport layer protocol (think OSI model) is used to carry the DNS packet? Compare this DNS response to others in the capture (generate more if needed). Which port number(s) are shared in common across these DNS requests?","title":"Part IV - Wireshark"},{"location":"assignments/Lab 3 Report/#part-v-security","text":"Examine the bytes view of the two packets. Do you see any human readable values in the output? Looking at these two packets and others in your capture, does Wireshark provide any clues about whether or not your DNS is encrypted? Does it provide any clues on whether your web traffic is encrypted? Attacker: What information might an outside observer be able to glean about your computing activities by capturing your DNS traffic? Was any discernible information revealed (as far as you can tell) through your web traffic?","title":"Part V - Security"},{"location":"assignments/Lab 3 Report/#deliverables","text":"For your deliverable, you will need to submit one file Canvas under the Assignment \"Lab 3 - Analyze DNS & HTTP in Wireshark\". This completed lab report (preferably in PDF format)","title":"Deliverables"},{"location":"assignments/dhcp-setup/","text":"Set up a DHCP Server for your LAN (2020-01-22) \u00b6 Overview \u00b6 In this assignment, we'll be standing up a DHCP service on the Raspberry Pi. As we've discussed in class, DHCP is a function that is sometimes performed by routers and is a necessary service whenever we are creating a new network (of almost any type). Before you Start \u00b6 Before starting any of the work within this checkpoint, make sure that you have completed all steps from checkpoint one, including the networkd setup. You must also have completed the Address Planning Exercise correctly. You will use the parameters you selected in that exercise to configure the IP address for the Pi as well as the configuration for isc-dhcp-server . Configure Static Addresses for your Raspberry Pi \u00b6 In this step, you will add a new configuration file to networkd in order to set up static addresses on eth0 . The addresses you use here will be the one you defined for your DHCP Server and Default Gateway in the LAN Planning Exercise . Please do not try to follow other tutorials for setting up addresses Every quarter, we have students who choose to follow online tutorials instead of the instructions we've provided. Please be aware that we are not using the default Raspberry Pi networking. These tutorials will often instruct you to configure static addresses in the /etc/dhcpcd.conf file or /etc/network/interfaces . Both of these methods were disabled when we set up networkd . Create a file named 20-eth0.network in /etc/systemd/network/ (you'll need to use sudo ) and define a static configuration that includes your chosen IP address and CIDR range. This path should already contain a default configuration for ethernet interfaces, e.g., 99-eth.network . We are overriding this configuration for eth0 by naming the file in such a way that networkd will load it first and by ensuring that the configuration will match eth0 exactly. Your file should look something like: [Match] # We only want to match the eth0 interface Name=eth0 # Provide full address config in abbreviated notation [Network] # Default Gateway / DHCP Server Address=192.168.0.1/24 # Enable link local addresses for IPv6 (FE80::) LinkLocalAddressing=ipv6 Warning Some online references will have you add a gateway and DNS settings for your new interface. You don't need to (and definitely shouldn't) add either to this interface. This interface does not provide a path for Internet traffic, but your Pi will try to use it that way if it believes it can be used for a default route. Likewise, we don't need to give the Pi DNS settings on Ethernet. The Pi will get it\u2019s DNS from the wireless interface, which received it\u2019s DNS settings from DHCP. In order to test these new settings: Call sudo systemctl restart systemd-networkd.service or reboot your Pi. Once you log back in, verify that networkd is running by calling systemctl status systemd-networkd and use the ip addr command to check that eth0 is online with the new address. Attention Make note that the Pi is now assigned to our new subnet, but our computer will still be using it's autoconfigured IPv4 address in the 169.254/16 range. In an IPv4 only world, this would prevent us from talking to the Pi. To fix the problem, we'd have to manually configure a static IP on our laptop in the same range as the Pi's network ID. Fortunately, both devices have autoconfigured IPv6 addresses that will be discovered through mDNS. By default, this is the address that SSH will use. Install and Configure DHCP \u00b6 For this part of the exercise, we'll use the ISC DHCP Server. The ISC server is available in apt repositories, so it can be installed using: sudo apt update sudo apt install isc-dhcp-server Edit /etc/default/isc-dhcp-server to specify the interfaces ( eth0 only) on which to run the DHCP server. Comment out any options pertaining to DHCP for IPv6. The stock DHCP configuration is located at /etc/dhcp/dhcpd.conf . This file contains a number of example subnet declarations that you are meant to pick and choose from in order to configure the DHCP server and to distribute addresses within your predefined address range. For this assignment, our configuration is quite minimal: Specifications Before you start to configure your subnet, comment out the lines near the top of the file that specify global settings for nameservers and domain (we won\u2019t use them right now). Create a new subnet configuration block using the network ID and network mask you established in the LAN Planning Exercise . Inside the subnet block, define a contiguous range of IP addresses for the DHCP pool out of the address range selected in the LAN Planning Exercise . You may browse the othe options available, but at this point you should not specify anything other than the DHCP lease range. Why don't we configure the default gateway or name servers yet? Students will frequently jump ahead and fill in additional network parameters. The reason we don't want to include these parameters yet is that our Pi is not yet ready to provide an Internet connection. Sending a default route back to your workstation will create a black hole of sorts for Internet traffic. Your computer will try to route the traffic through the Pi, and the Pi will simply drop everything it receives. Test DHCP Server \u00b6 Use systemctl to restart the DHCP service as shown here: sudo systemctl restart isc-dhcp-server.service If you see errors such as the one shown here, you\u2019ll need to continue troubleshooting the DHCP server (see next section). pi@titan:~ $ sudo systemctl restart isc-dhcp-server.service Job for isc-dhcp-server.service failed because the control process exited with error code. See \"systemctl status isc-dhcp-server.service\" and \"journalctl -xe\" for details. Check your local machine to confirm that an IP address in the specified network range was provided. Try running ping from both directions (laptop -> pi and pi -> laptop) to confirm that the IP address and related settings are configured correctly. Troubleshooting \u00b6 Troubleshooting for the ISC DHCP Server can be found under troubleshooting dhcp dhcp .","title":"Installing and Configuring the ISC DHCP Server"},{"location":"assignments/dhcp-setup/#set-up-a-dhcp-server-for-your-lan-2020-01-22","text":"","title":"Set up a DHCP Server for your LAN (2020-01-22)"},{"location":"assignments/dhcp-setup/#overview","text":"In this assignment, we'll be standing up a DHCP service on the Raspberry Pi. As we've discussed in class, DHCP is a function that is sometimes performed by routers and is a necessary service whenever we are creating a new network (of almost any type).","title":"Overview"},{"location":"assignments/dhcp-setup/#before-you-start","text":"Before starting any of the work within this checkpoint, make sure that you have completed all steps from checkpoint one, including the networkd setup. You must also have completed the Address Planning Exercise correctly. You will use the parameters you selected in that exercise to configure the IP address for the Pi as well as the configuration for isc-dhcp-server .","title":"Before you Start"},{"location":"assignments/dhcp-setup/#configure-static-addresses-for-your-raspberry-pi","text":"In this step, you will add a new configuration file to networkd in order to set up static addresses on eth0 . The addresses you use here will be the one you defined for your DHCP Server and Default Gateway in the LAN Planning Exercise . Please do not try to follow other tutorials for setting up addresses Every quarter, we have students who choose to follow online tutorials instead of the instructions we've provided. Please be aware that we are not using the default Raspberry Pi networking. These tutorials will often instruct you to configure static addresses in the /etc/dhcpcd.conf file or /etc/network/interfaces . Both of these methods were disabled when we set up networkd . Create a file named 20-eth0.network in /etc/systemd/network/ (you'll need to use sudo ) and define a static configuration that includes your chosen IP address and CIDR range. This path should already contain a default configuration for ethernet interfaces, e.g., 99-eth.network . We are overriding this configuration for eth0 by naming the file in such a way that networkd will load it first and by ensuring that the configuration will match eth0 exactly. Your file should look something like: [Match] # We only want to match the eth0 interface Name=eth0 # Provide full address config in abbreviated notation [Network] # Default Gateway / DHCP Server Address=192.168.0.1/24 # Enable link local addresses for IPv6 (FE80::) LinkLocalAddressing=ipv6 Warning Some online references will have you add a gateway and DNS settings for your new interface. You don't need to (and definitely shouldn't) add either to this interface. This interface does not provide a path for Internet traffic, but your Pi will try to use it that way if it believes it can be used for a default route. Likewise, we don't need to give the Pi DNS settings on Ethernet. The Pi will get it\u2019s DNS from the wireless interface, which received it\u2019s DNS settings from DHCP. In order to test these new settings: Call sudo systemctl restart systemd-networkd.service or reboot your Pi. Once you log back in, verify that networkd is running by calling systemctl status systemd-networkd and use the ip addr command to check that eth0 is online with the new address. Attention Make note that the Pi is now assigned to our new subnet, but our computer will still be using it's autoconfigured IPv4 address in the 169.254/16 range. In an IPv4 only world, this would prevent us from talking to the Pi. To fix the problem, we'd have to manually configure a static IP on our laptop in the same range as the Pi's network ID. Fortunately, both devices have autoconfigured IPv6 addresses that will be discovered through mDNS. By default, this is the address that SSH will use.","title":"Configure Static Addresses for your Raspberry Pi"},{"location":"assignments/dhcp-setup/#install-and-configure-dhcp","text":"For this part of the exercise, we'll use the ISC DHCP Server. The ISC server is available in apt repositories, so it can be installed using: sudo apt update sudo apt install isc-dhcp-server Edit /etc/default/isc-dhcp-server to specify the interfaces ( eth0 only) on which to run the DHCP server. Comment out any options pertaining to DHCP for IPv6. The stock DHCP configuration is located at /etc/dhcp/dhcpd.conf . This file contains a number of example subnet declarations that you are meant to pick and choose from in order to configure the DHCP server and to distribute addresses within your predefined address range. For this assignment, our configuration is quite minimal: Specifications Before you start to configure your subnet, comment out the lines near the top of the file that specify global settings for nameservers and domain (we won\u2019t use them right now). Create a new subnet configuration block using the network ID and network mask you established in the LAN Planning Exercise . Inside the subnet block, define a contiguous range of IP addresses for the DHCP pool out of the address range selected in the LAN Planning Exercise . You may browse the othe options available, but at this point you should not specify anything other than the DHCP lease range. Why don't we configure the default gateway or name servers yet? Students will frequently jump ahead and fill in additional network parameters. The reason we don't want to include these parameters yet is that our Pi is not yet ready to provide an Internet connection. Sending a default route back to your workstation will create a black hole of sorts for Internet traffic. Your computer will try to route the traffic through the Pi, and the Pi will simply drop everything it receives.","title":"Install and Configure DHCP"},{"location":"assignments/dhcp-setup/#test-dhcp-server","text":"Use systemctl to restart the DHCP service as shown here: sudo systemctl restart isc-dhcp-server.service If you see errors such as the one shown here, you\u2019ll need to continue troubleshooting the DHCP server (see next section). pi@titan:~ $ sudo systemctl restart isc-dhcp-server.service Job for isc-dhcp-server.service failed because the control process exited with error code. See \"systemctl status isc-dhcp-server.service\" and \"journalctl -xe\" for details. Check your local machine to confirm that an IP address in the specified network range was provided. Try running ping from both directions (laptop -> pi and pi -> laptop) to confirm that the IP address and related settings are configured correctly.","title":"Test DHCP Server"},{"location":"assignments/dhcp-setup/#troubleshooting","text":"Troubleshooting for the ISC DHCP Server can be found under troubleshooting dhcp dhcp .","title":"Troubleshooting"},{"location":"assignments/lab2/","text":"Lab 2 - Analyzing DHCP and ARP with Wireshark \u00b6 canvas link Overview \u00b6 The purpose of this lab is for students to get familiar with basic functionalities of Wireshark, and to be able to capture and analyze network traffic. There will be multiple correct ways to complete this lab, we highly recommend using search engines to help you find solutions. Introduction to Wireshark \u00b6 Wireshark is a tool designed to record and observe the messages that are sent over a network and to provide an analyst with tools to understand and troubleshoot the protocols associated with those messages. Starting a Capture \u00b6 Open Wireshark and locate the Capture section of the launch screen. This section contains an input field for configuring capture filters and a list of physical and virtual interfaces that can be used to capture packets. To the right of each interface, you should notice an animated \u201csparkline\u201d which indicates the level of activity on the associated network. You can launch a capture on your active interface (likely Wi-Fi or Ethernet) by double-clicking on the respective label. If a capture filter was specified before you selected the interface, Wireshark ignores any packets that don't match the filter. If the filter input is empty, Wireshark records everything it sees on the wire. Recording continues until you press the stop icon in the top toolbar or close the application. Exploring a Capture \u00b6 By default, Wireshark will divide capture-related content among three panes: Packet List Packet Details Packet Bytes The Packet List displays all packets in the current capture, summarizing important details about traffic flow and the type of data contained in the packet. The Packet Details view initially displays a layered summary of the protocols represented in the selected packet. A more detailed view of each protocol can be explored by clicking the arrow icons to the left of the summary. The order of the protocols in this view corresponds to the order in which each protocol\u2019s header appears in the data frame. The Packet Bytes pane can be useful for understanding the basic structure of raw network messages. As you navigate through the details in this view, Wireshark will highlight the corresponding bytes in the Packet Bytes pane. Narrowing your Search \u00b6 If you have any software, particularly a web browser, running in the background, you'll notice that Wireshark can quickly accumulate a large list of packets. Fortunately, the software provides a variety of tools to help you more easily locate packets relevant to your search. The packet list can be modified non-destructively by adding/removing display filters 1 in the input field below the top toolbar. Display filters are a valuable analytic tool that allows you to remove noise and quickly focus on packets that match certain criteria. In addition to writing your own display filters, you can access a variety of context-specific analysis tools by right clicking on any row of the Packet List or a field within the Packet Details pane. These tools can help you create a display filter based on the current packet or to investigate a conversation that spans multiple packets. Instructions \u00b6 DHCP \u00b6 Setup \u00b6 Stop any ongoing captures and configure a new capture on your wireless interface with capture filter arp || udp portrange 67-68 . This filter will prevent Wireshark from capturing excessive amounts of traffic so that we can leave the capture running for the entire lab. While our current capture should be fairly quiet owing to the previous capture filter, create a display filter to further reduce the number of visible packets (Hint: Type dhcp into the display filter input below the main wireshark toolbar). At the end of the lab, save your capture and submit it with your assignment. Request a new DHCP Lease \u00b6 In order to properly complete this lab, you will need to terminate your current DHCP lease so that you can capture the process of DHCP initializing your network interface. This process will differ depending on your OS. Follow the instructions linked on the resources site to complete this process. Report \u00b6 Based on your capture, create an outline of a complete DHCP exchange. For each message: Include a screenshot of the packet details summary. Include a brief written summary, identifying: DHCP message type, DHCP transaction ID, source and destination Ethernet addresses, source and destination IP addresses, and UDP source and destination UDP ports associated. How can you determine which messages were sent by your own device versus the DHCP server? Based on the outline you created above, determine the purpose of the 0.0.0.0 address appearing within the DHCP exchange. What Ethernet-layer address corresponds to the 255.255.255.255 IP address? Using online resources as necessary, determine the purpose of these special addresses. Which of the fields that you have observed can be used to distinguish between different conversations between the same client and server? If you look closely at the packet details for each message, you'll notice that each DHCP message contains a variety of options. In DHCP, options allow DHCP clients and servers to adapt the protocol to their own needs. Like many other protocols, DHCP encodes options as a type , a length , and a value . Based on this structure, we can continue to extend the protocol without needing to change the basic foundation. Using your search engine of choice, identify the IETF RFC (# and name) that defines the common option types for the DHCP protocol. Which DHCP Option (#) tells us the DHCP message type? How many bytes are required to encode the type? Which DHCP Option (#) tells us the length of a DHCP lease? How many bytes are required to encode the duration of the lease? According to the RFC, is it possible to specify the lease length in any unit of time other than seconds? Compare the Lease Time option of the Discover message with the value in the Offer message. Did your device request a particular duration? If so, did the server honor this request? Using online resources as needed, determine what happens at the end of a DHCP address lease. Based on the order of the messages in the capture and the details we've asked you to examine, offer an explanation of how the DHCP protocol works to configure your network interface with appropriate settings. How does the protocol make use of Ethernet and IP broadcast functionality, and why is that important? Use your capture to illustrate your point. ARP \u00b6 Setup \u00b6 You may continue to use the same capture for this section. If you launch a new capture, please save the first capture and submit both with your assignment. Before you begin the analysis questions, clear the ARP cache per instructions linked on the resources site and generate some Internet traffic, e.g., browse the web. Remove any existing display filters and create a new filter that will only show ARP related traffic. (Hint: type arp in the display filter input). Report \u00b6 Outline a complete ARP exchange (request and response), including a screenshot and a brief summary of each message. Identify the 48-bit hardware address associated with your network interface and use this information to specify which message(s) originated from your local device? Determine which messages are sent to a broadcast destination. Why do you think the ARP protocol makes use of the broadcast destination? Aside from the broadcast address, what other differences do you notice between the contents of ARP requests and replies? Spend a moment comparing the overall packet structure (as seen in the Packet Details view) between DHCP and ARP. Identify any layers that are present in one protocol but not in the other. In order for a network message to be considered an IP packet, the message must contain an Internet Protocol layer that includes an IP header for the rest of the message. Does the ARP protocol use IP packets to communicate? Describe in your own words how ARP works to allow hosts to communicate in a Layer-2 network based on IP address. Use your capture to illustrate your points. Do not confuse display filters and capture filters. They serve very different purposes and even use distinct syntax. \u21a9","title":"Lab 2"},{"location":"assignments/lab2/#lab-2-analyzing-dhcp-and-arp-with-wireshark","text":"canvas link","title":"Lab 2 - Analyzing DHCP and ARP with Wireshark"},{"location":"assignments/lab2/#overview","text":"The purpose of this lab is for students to get familiar with basic functionalities of Wireshark, and to be able to capture and analyze network traffic. There will be multiple correct ways to complete this lab, we highly recommend using search engines to help you find solutions.","title":"Overview"},{"location":"assignments/lab2/#introduction-to-wireshark","text":"Wireshark is a tool designed to record and observe the messages that are sent over a network and to provide an analyst with tools to understand and troubleshoot the protocols associated with those messages.","title":"Introduction to Wireshark"},{"location":"assignments/lab2/#starting-a-capture","text":"Open Wireshark and locate the Capture section of the launch screen. This section contains an input field for configuring capture filters and a list of physical and virtual interfaces that can be used to capture packets. To the right of each interface, you should notice an animated \u201csparkline\u201d which indicates the level of activity on the associated network. You can launch a capture on your active interface (likely Wi-Fi or Ethernet) by double-clicking on the respective label. If a capture filter was specified before you selected the interface, Wireshark ignores any packets that don't match the filter. If the filter input is empty, Wireshark records everything it sees on the wire. Recording continues until you press the stop icon in the top toolbar or close the application.","title":"Starting a Capture"},{"location":"assignments/lab2/#exploring-a-capture","text":"By default, Wireshark will divide capture-related content among three panes: Packet List Packet Details Packet Bytes The Packet List displays all packets in the current capture, summarizing important details about traffic flow and the type of data contained in the packet. The Packet Details view initially displays a layered summary of the protocols represented in the selected packet. A more detailed view of each protocol can be explored by clicking the arrow icons to the left of the summary. The order of the protocols in this view corresponds to the order in which each protocol\u2019s header appears in the data frame. The Packet Bytes pane can be useful for understanding the basic structure of raw network messages. As you navigate through the details in this view, Wireshark will highlight the corresponding bytes in the Packet Bytes pane.","title":"Exploring a Capture"},{"location":"assignments/lab2/#narrowing-your-search","text":"If you have any software, particularly a web browser, running in the background, you'll notice that Wireshark can quickly accumulate a large list of packets. Fortunately, the software provides a variety of tools to help you more easily locate packets relevant to your search. The packet list can be modified non-destructively by adding/removing display filters 1 in the input field below the top toolbar. Display filters are a valuable analytic tool that allows you to remove noise and quickly focus on packets that match certain criteria. In addition to writing your own display filters, you can access a variety of context-specific analysis tools by right clicking on any row of the Packet List or a field within the Packet Details pane. These tools can help you create a display filter based on the current packet or to investigate a conversation that spans multiple packets.","title":"Narrowing your Search"},{"location":"assignments/lab2/#instructions","text":"","title":"Instructions"},{"location":"assignments/lab2/#dhcp","text":"","title":"DHCP"},{"location":"assignments/lab2/#setup","text":"Stop any ongoing captures and configure a new capture on your wireless interface with capture filter arp || udp portrange 67-68 . This filter will prevent Wireshark from capturing excessive amounts of traffic so that we can leave the capture running for the entire lab. While our current capture should be fairly quiet owing to the previous capture filter, create a display filter to further reduce the number of visible packets (Hint: Type dhcp into the display filter input below the main wireshark toolbar). At the end of the lab, save your capture and submit it with your assignment.","title":"Setup"},{"location":"assignments/lab2/#request-a-new-dhcp-lease","text":"In order to properly complete this lab, you will need to terminate your current DHCP lease so that you can capture the process of DHCP initializing your network interface. This process will differ depending on your OS. Follow the instructions linked on the resources site to complete this process.","title":"Request a new DHCP Lease"},{"location":"assignments/lab2/#report","text":"Based on your capture, create an outline of a complete DHCP exchange. For each message: Include a screenshot of the packet details summary. Include a brief written summary, identifying: DHCP message type, DHCP transaction ID, source and destination Ethernet addresses, source and destination IP addresses, and UDP source and destination UDP ports associated. How can you determine which messages were sent by your own device versus the DHCP server? Based on the outline you created above, determine the purpose of the 0.0.0.0 address appearing within the DHCP exchange. What Ethernet-layer address corresponds to the 255.255.255.255 IP address? Using online resources as necessary, determine the purpose of these special addresses. Which of the fields that you have observed can be used to distinguish between different conversations between the same client and server? If you look closely at the packet details for each message, you'll notice that each DHCP message contains a variety of options. In DHCP, options allow DHCP clients and servers to adapt the protocol to their own needs. Like many other protocols, DHCP encodes options as a type , a length , and a value . Based on this structure, we can continue to extend the protocol without needing to change the basic foundation. Using your search engine of choice, identify the IETF RFC (# and name) that defines the common option types for the DHCP protocol. Which DHCP Option (#) tells us the DHCP message type? How many bytes are required to encode the type? Which DHCP Option (#) tells us the length of a DHCP lease? How many bytes are required to encode the duration of the lease? According to the RFC, is it possible to specify the lease length in any unit of time other than seconds? Compare the Lease Time option of the Discover message with the value in the Offer message. Did your device request a particular duration? If so, did the server honor this request? Using online resources as needed, determine what happens at the end of a DHCP address lease. Based on the order of the messages in the capture and the details we've asked you to examine, offer an explanation of how the DHCP protocol works to configure your network interface with appropriate settings. How does the protocol make use of Ethernet and IP broadcast functionality, and why is that important? Use your capture to illustrate your point.","title":"Report"},{"location":"assignments/lab2/#arp","text":"","title":"ARP"},{"location":"assignments/lab2/#setup_1","text":"You may continue to use the same capture for this section. If you launch a new capture, please save the first capture and submit both with your assignment. Before you begin the analysis questions, clear the ARP cache per instructions linked on the resources site and generate some Internet traffic, e.g., browse the web. Remove any existing display filters and create a new filter that will only show ARP related traffic. (Hint: type arp in the display filter input).","title":"Setup"},{"location":"assignments/lab2/#report_1","text":"Outline a complete ARP exchange (request and response), including a screenshot and a brief summary of each message. Identify the 48-bit hardware address associated with your network interface and use this information to specify which message(s) originated from your local device? Determine which messages are sent to a broadcast destination. Why do you think the ARP protocol makes use of the broadcast destination? Aside from the broadcast address, what other differences do you notice between the contents of ARP requests and replies? Spend a moment comparing the overall packet structure (as seen in the Packet Details view) between DHCP and ARP. Identify any layers that are present in one protocol but not in the other. In order for a network message to be considered an IP packet, the message must contain an Internet Protocol layer that includes an IP header for the rest of the message. Does the ARP protocol use IP packets to communicate? Describe in your own words how ARP works to allow hosts to communicate in a Layer-2 network based on IP address. Use your capture to illustrate your points. Do not confuse display filters and capture filters. They serve very different purposes and even use distinct syntax. \u21a9","title":"Report"},{"location":"assignments/lab3/","text":"Lab 3 - Analyze DNS & HTTP in Wireshark \u00b6 Overview \u00b6 The purpose of this lab is for students to gain hands on experience with DNS. By the end of the lab you will be familiar with: dig (or PowerShell's Resolve-DnsName command) DNS queries security faults of DNS We highly recommend using search engines to help you find solutions. As usual, there will be multiple ways to complete this lab. Please use the template provided on Canvas under the Assignment \"Lab 3 - Analyze DNS & HTTP in Wireshark\" to complete your lab report. Part I - website \u00b6 Pick a popular website that has a lot of content on it. Ideally it should contain advertisements. You will be using it throughout this lab. Report : What website did you select? Part II - dig \u00b6 Before jumping into more complicated scenarios we would like you to learn how to use the dig command as it is an incredibly helpful and simple tool. We've provided some resources at Perform DNS Loookups Manually to help you get started. Use dig to lookup the domain name of the website you selected. Open up a new tab in your browser and enter (one of) the IP address(es) returned by dig to discover where it will take you. If dig returned more than one address, open up a second tab and enter it now. Note Don't panic if you receive an error instead of a live site. Some servers host more than one website and need the name to help route you to the right place. Try another site, e.g., uw.edu, and see if you get different results. Report : What addresses did the dig command return? Copy dig results to your report (code block or screenshot). What did you observe when you browsed to the IP addresses directly? Aside from A records containing IP addresses, did you discover any other DNS records from your query? List at least 3 other record types that DNS manages. Look closely at the output of the dig command. How can you be sure that the query completed successfully? Identify the IP address of the server used to handle your query. Part III - dev tools \u00b6 Open up a new tab preferably in a chromium based browser (Chrome, Brave, etc...). Open up the dev tools (right click on page and click Inspect), and go to the Network option. In that very same tab paste in your selected web page into the URL bar and click enter. You should see all of the GET and POST requests that the browser made for that webpage load up in the dev tools. Right-click the header of the Network Log table and select Domain. The domain of each resource is now shown. Take some time to scroll through the domains, files, and file types your website was requesting. Report : From a quick glance what is the most common file type requested? Approximately how many domains do you see in that list that don't matchup with the website domain you initially visited? Why do you think this page is getting information from other websites? If you had to guess, how many DNS requests do you think were sent in order to fully load this page? Part IV - wireshark \u00b6 Before examining DNS requests in Wireshark you will want to clear your DNS cache. Instructions on what that means, what it's for, and how to do so can be found here 314-docs/trouble/dns . Create a capture of you visiting your website by: Open Wireshark, begin a capture Quickly open a new tab and visit your website in your browser Once it has fully loaded end your Wireshark capture. Now filter for DNS packets only in the display filter. Identify the DNS response containing the information you needed in order to convert your website name into an IP address. Use the information contained within that packet for the following deliverable. Hint Learn how to use the search tool to find string content or research display filters that allow you to specify the domain name. Report : Assuming almost all of the DNS requests you see in Wireshark right now are for the one website you visited, how many DNS requests do you see? Overall were there less or more DNS queries than you'd expect? How did you identify the DNS packet(s) associated with the website you visited? Provide screenshots of the packet(s) (specifically of the DNS information in Packet Details). List the ip addresses you received for the website from the DNS server that resolved your request. Which transport layer protocol ( think OSI model ) is used to carry the DNS packet? Compare this DNS response to others in the capture (generate more if needed). Which port number(s) are shared in common across these DNS requests? Part V - security \u00b6 Open two packets in bytes view, a dns and a http packet that is encrypted with tls. Double click one of the DNS packets in order to be able to see the bytes view. Remove the dns display filter and replace it with tls (web traffic). Open one of the tls packets in byte view too. Report : Examine the bytes view of the two packets. Do you see any human readable values in the output? Looking at these two packets and others in your capture, does Wireshark provide any clues about whether or not your DNS is encrypted? Does it provide any clues on whether your web traffic is encrypted? Attacker: What information might an outside observer be able to glean about your computing activities by capturing your DNS traffic? Was any discernible information revealed (as far as you can tell) through your web traffic?","title":"Lab 3"},{"location":"assignments/lab3/#lab-3-analyze-dns-http-in-wireshark","text":"","title":"Lab 3 - Analyze DNS &amp; HTTP in Wireshark"},{"location":"assignments/lab3/#overview","text":"The purpose of this lab is for students to gain hands on experience with DNS. By the end of the lab you will be familiar with: dig (or PowerShell's Resolve-DnsName command) DNS queries security faults of DNS We highly recommend using search engines to help you find solutions. As usual, there will be multiple ways to complete this lab. Please use the template provided on Canvas under the Assignment \"Lab 3 - Analyze DNS & HTTP in Wireshark\" to complete your lab report.","title":"Overview"},{"location":"assignments/lab3/#part-i-website","text":"Pick a popular website that has a lot of content on it. Ideally it should contain advertisements. You will be using it throughout this lab. Report : What website did you select?","title":"Part I - website"},{"location":"assignments/lab3/#part-ii-dig","text":"Before jumping into more complicated scenarios we would like you to learn how to use the dig command as it is an incredibly helpful and simple tool. We've provided some resources at Perform DNS Loookups Manually to help you get started. Use dig to lookup the domain name of the website you selected. Open up a new tab in your browser and enter (one of) the IP address(es) returned by dig to discover where it will take you. If dig returned more than one address, open up a second tab and enter it now. Note Don't panic if you receive an error instead of a live site. Some servers host more than one website and need the name to help route you to the right place. Try another site, e.g., uw.edu, and see if you get different results. Report : What addresses did the dig command return? Copy dig results to your report (code block or screenshot). What did you observe when you browsed to the IP addresses directly? Aside from A records containing IP addresses, did you discover any other DNS records from your query? List at least 3 other record types that DNS manages. Look closely at the output of the dig command. How can you be sure that the query completed successfully? Identify the IP address of the server used to handle your query.","title":"Part II - dig"},{"location":"assignments/lab3/#part-iii-dev-tools","text":"Open up a new tab preferably in a chromium based browser (Chrome, Brave, etc...). Open up the dev tools (right click on page and click Inspect), and go to the Network option. In that very same tab paste in your selected web page into the URL bar and click enter. You should see all of the GET and POST requests that the browser made for that webpage load up in the dev tools. Right-click the header of the Network Log table and select Domain. The domain of each resource is now shown. Take some time to scroll through the domains, files, and file types your website was requesting. Report : From a quick glance what is the most common file type requested? Approximately how many domains do you see in that list that don't matchup with the website domain you initially visited? Why do you think this page is getting information from other websites? If you had to guess, how many DNS requests do you think were sent in order to fully load this page?","title":"Part III - dev tools"},{"location":"assignments/lab3/#part-iv-wireshark","text":"Before examining DNS requests in Wireshark you will want to clear your DNS cache. Instructions on what that means, what it's for, and how to do so can be found here 314-docs/trouble/dns . Create a capture of you visiting your website by: Open Wireshark, begin a capture Quickly open a new tab and visit your website in your browser Once it has fully loaded end your Wireshark capture. Now filter for DNS packets only in the display filter. Identify the DNS response containing the information you needed in order to convert your website name into an IP address. Use the information contained within that packet for the following deliverable. Hint Learn how to use the search tool to find string content or research display filters that allow you to specify the domain name. Report : Assuming almost all of the DNS requests you see in Wireshark right now are for the one website you visited, how many DNS requests do you see? Overall were there less or more DNS queries than you'd expect? How did you identify the DNS packet(s) associated with the website you visited? Provide screenshots of the packet(s) (specifically of the DNS information in Packet Details). List the ip addresses you received for the website from the DNS server that resolved your request. Which transport layer protocol ( think OSI model ) is used to carry the DNS packet? Compare this DNS response to others in the capture (generate more if needed). Which port number(s) are shared in common across these DNS requests?","title":"Part IV - wireshark"},{"location":"assignments/lab3/#part-v-security","text":"Open two packets in bytes view, a dns and a http packet that is encrypted with tls. Double click one of the DNS packets in order to be able to see the bytes view. Remove the dns display filter and replace it with tls (web traffic). Open one of the tls packets in byte view too. Report : Examine the bytes view of the two packets. Do you see any human readable values in the output? Looking at these two packets and others in your capture, does Wireshark provide any clues about whether or not your DNS is encrypted? Does it provide any clues on whether your web traffic is encrypted? Attacker: What information might an outside observer be able to glean about your computing activities by capturing your DNS traffic? Was any discernible information revealed (as far as you can tell) through your web traffic?","title":"Part V - security"},{"location":"assignments/networkd-setup/","text":"Networkd Setup for Raspbian (2020-01-22) \u00b6 Intro to Systemd \u00b6 An init provider is the first process that is launched on a Linux system. It is responsible for loading other essential services, and it ultimately becomes the parent of every other process on the system. Among the differences between different Linux distributions is the choice of init system. systemd is the initialization (init) provider most often deployed on recent Linux distributions. On Raspbian and other recent Debian-based distros systemd replaces the aging sysvinit . We will interact directly with systemd in this tutorial by issuing systemctl commands to start, stop, enable and disable various system-level services. Beyond its job of launching essential services, systemd provides a modular interface to control many parts of the system. We've already interacted with a few of these components when we used localectl , timedatectl , and hostnamectl during the initial setup of the RaspberryPi. In this tutorial we will leverage three more systemd subsystems: journald - Collects and catalogs log files from system services and applications. You can explore these files with journalctl as seen in Troubleshooting . networkd - Detects and configures network devices and performs various other network management functions. resolved - Provides network name resolution and maintains a list of DNS servers (network-based resolvers) to contact based on settings provided by DHCP or networkd configuration files. Danger: Risk of bricking your Pi A typo or other mistake within the core network configuration can result in total loss of network connectivity. If this happens, you will not be able to manage your Pi over SSH. Your only option will be to configure the Pi again from scratch or to troubleshoot using an external HDMI monitor and USB keyboard. We will not grant extensions for this type of incident. Before you begin to follow these instructions, make an external copy of critical configs such as wpa_supplicant using scp . We provide additional tips for rebuilding at the end of this guide. Systemd vs Default Networking \u00b6 By default, Raspbian networking relies on a component called dhcpcd to manage interface settings, addresses, etc. While this component works well for general purpose computing, but it is not a match for every scenario. The current version of Debian (the base OS for Raspbian) supports systemd based network management via the systemd-networkd service. Unlike dhcpcd , networkd is well-suited to managing the base configuration for our router. Enabling Networkd \u00b6 We will enable networkd in several steps. Try to complete this process in one sitting to avoid \"bricking\" your Pi (at least making it inaccessible over the network). Retain journald logs \u00b6 systemd-networkd stores its logs in systemd-journald . We want journald to keep these logs between boots, which we enable by creating the persistent log path. # Create the location for persistent log messages sudo mkdir -p /var/log/journal sudo systemd-tmpfiles --create --prefix /var/log/journal Configure network interfaces \u00b6 To configure the network with networkd , we create files in /etc/systemd/network/ that match named network interfaces and define our desired settings settings. Create the following .network files to handle the default settings for wired and wireless interfaces. Enabling link local addresses is a critical component of these default configurations so that you can still communicate with the Pi when DHCP is not available. Warning Networkd configuration is generally easy to work with, but there are a couple of footguns to be aware of: The files are case sensitive and sometimes sensitive to seemingly innocuous changes in spacing. A file with a missing or invalid [Match] statement will be applied to every interface that hasn't already been matched by an earlier configuration. FAQ: Networkd configuration files man systemd.network provides a comprehensive reference to the format of the networkd configuration files and the process for loading them. At runtime, networkd gathers files using the .network extension from several locations, including /etc/systemd/network/ . To determine the order in which to apply configuration, networkd sorts all of these files lexically. To maintain proper control over execution order, we can prepend a two digit numeric value to the filename. This allows us to set up high-numbered default configurations that are overriden on a case-by-case basis by low-numberd configs files. Default ethernet configuration \u00b6 /etc/systemd/network/99-eth.network [Match] # Applies to eth0, eth1, ... Name=eth* [Network] # Configure IPv4 using DHCP DHCP=ipv4 # Enable link local addresses for IPv4 (169.254.x.y) and IPv6 (FE80::) LinkLocalAddressing=yes Default wireless configuration \u00b6 /etc/systemd/network/99-wlan.network [Match] Name=wlan* [Network] DHCP=ipv4 Disable default networking \u00b6 Tip: Backup new configuration before proceeding If you've made any mistakes, you may lose access to your Pi after performing the following steps. Make an offline backup before you proceed by copying files to your local system with scp . # Disable default Raspbian networking sudo systemctl mask dhcpcd.service # Disable legacy Debian networking sudo systemctl mask networking.service # Disable resolvconf service, which manages DNS servers for the OS sudo nano /etc/resolvconf.conf # Add the line resolvconf=NO to the beginning of the file Enable systemd network services \u00b6 # Enable systemd-networkd to replace Raspbian and Debian networking sudo systemctl enable systemd-networkd # Enable systemd-resolved to replace the resolvconf service sudo systemctl enable systemd-resolved DNS resolvers for Linux are loaded from the /etc/resolv.conf . Rather than manage this directly or through resolvconf , we want to load resolvers dynamically from systemd-resolved . This is as simple as creating a link # Set up a symbolic link from systemd-resolved resolv.conf to the system resolv.conf sudo ln -sf /run/systemd/resolve/resolv.conf /etc/resolv.conf Modify Wireless Startup \u00b6 Our original setup was driven by assumptions about dhcpcd . Before we reboot, we'll make a few brief changes to manage wpa_supplicant on an interface-by-interface basis. # Rename configuration as a per-interface file sudo mv /etc/wpa_supplicant/wpa_supplicant.conf /etc/wpa_supplicant/wpa_supplicant-wlan0.conf # Enable the wpa_supplicant service specifically for wlan0 sudo systemctl enable wpa_supplicant@wlan0 # Disable the non-interface specific service sudo systemctl disable wpa_supplicant Test Your Configuration \u00b6 Call sudo reboot now to reboot the Pi. Log back in and verify that your Pi is fully operational: Confirm that your wireless interface is online cat /etc/resolv.conf to confirm that it is being populated by systemd-resolved Troubleshooting \u00b6 General Guidance \u00b6 When logging back into your Pi, you may find that some of the functionality is failing. In addition to validating log files and checking that you completed all instructions, log files can provide valuable information for detecting where an error is occurring. We have already mentioned journald earlier in this guide. In order to evaluate logs that are created by journald , we make use of the journalctl command. Read up on the less utility to learn how to efficiently navigate journalctl output. # Show log messages journalctl # Include messages marked secure sudo journalctl # Show messages from last boot journalctl -k -b -1 # Show networkd messages journalctl -u systemd-networkd # Show resolved messages journalctl -u systemd-resolved # Show wpa_supplicant messages for wlan0 journalctl -u wpa_supplicant@wlan0 # Load journal from a file path journalctl -D /PATH/TO/JOURNAL_FILE # Learn more about journald man journalctl Accessing a Bricked Pi \u00b6 If you made a mistake at the wrong point in the previous process, you may not even be able to connect anymore from the network. The only way to debug at this point will be to attach a keyboard/monitor to the Pi or to mount the memory card from another Linux machine or VM. Rebuilding Raspbian \u00b6 Alternatively, you may opt to reflash your memory card and repeat initial setup. If you find yourself in this position, the following recommendations will simplify the process: Copy a fully configured wpa_supplicant.conf to the boot volume of the memory card before the first boot. Raspbian will move the file to the proper location in /etc/wpa_supplicant and set its permissions on the first boot. Remove the previous server key hash from .ssh/known_hosts to prevent ssh from complaining about the Pi's new key. macOS/Linux - Run ssh-keygen -R raspberrypi.local Windows - Edit $HOME\\.ssh\\known_hosts and remove the lines that reference raspberrypi.local before you attempt to connect. macOS/Linux - Run ssh-copy-id -i ~/.ssh/id_ed25519 to quickly copy your public keys into authorized_keys . Windows users will have to manually set this file up as shown in previous guides.","title":"networkd Setup"},{"location":"assignments/networkd-setup/#networkd-setup-for-raspbian-2020-01-22","text":"","title":"Networkd Setup for Raspbian (2020-01-22)"},{"location":"assignments/networkd-setup/#intro-to-systemd","text":"An init provider is the first process that is launched on a Linux system. It is responsible for loading other essential services, and it ultimately becomes the parent of every other process on the system. Among the differences between different Linux distributions is the choice of init system. systemd is the initialization (init) provider most often deployed on recent Linux distributions. On Raspbian and other recent Debian-based distros systemd replaces the aging sysvinit . We will interact directly with systemd in this tutorial by issuing systemctl commands to start, stop, enable and disable various system-level services. Beyond its job of launching essential services, systemd provides a modular interface to control many parts of the system. We've already interacted with a few of these components when we used localectl , timedatectl , and hostnamectl during the initial setup of the RaspberryPi. In this tutorial we will leverage three more systemd subsystems: journald - Collects and catalogs log files from system services and applications. You can explore these files with journalctl as seen in Troubleshooting . networkd - Detects and configures network devices and performs various other network management functions. resolved - Provides network name resolution and maintains a list of DNS servers (network-based resolvers) to contact based on settings provided by DHCP or networkd configuration files. Danger: Risk of bricking your Pi A typo or other mistake within the core network configuration can result in total loss of network connectivity. If this happens, you will not be able to manage your Pi over SSH. Your only option will be to configure the Pi again from scratch or to troubleshoot using an external HDMI monitor and USB keyboard. We will not grant extensions for this type of incident. Before you begin to follow these instructions, make an external copy of critical configs such as wpa_supplicant using scp . We provide additional tips for rebuilding at the end of this guide.","title":"Intro to Systemd"},{"location":"assignments/networkd-setup/#systemd-vs-default-networking","text":"By default, Raspbian networking relies on a component called dhcpcd to manage interface settings, addresses, etc. While this component works well for general purpose computing, but it is not a match for every scenario. The current version of Debian (the base OS for Raspbian) supports systemd based network management via the systemd-networkd service. Unlike dhcpcd , networkd is well-suited to managing the base configuration for our router.","title":"Systemd vs Default Networking"},{"location":"assignments/networkd-setup/#enabling-networkd","text":"We will enable networkd in several steps. Try to complete this process in one sitting to avoid \"bricking\" your Pi (at least making it inaccessible over the network).","title":"Enabling Networkd"},{"location":"assignments/networkd-setup/#retain-journald-logs","text":"systemd-networkd stores its logs in systemd-journald . We want journald to keep these logs between boots, which we enable by creating the persistent log path. # Create the location for persistent log messages sudo mkdir -p /var/log/journal sudo systemd-tmpfiles --create --prefix /var/log/journal","title":"Retain journald logs"},{"location":"assignments/networkd-setup/#configure-network-interfaces","text":"To configure the network with networkd , we create files in /etc/systemd/network/ that match named network interfaces and define our desired settings settings. Create the following .network files to handle the default settings for wired and wireless interfaces. Enabling link local addresses is a critical component of these default configurations so that you can still communicate with the Pi when DHCP is not available. Warning Networkd configuration is generally easy to work with, but there are a couple of footguns to be aware of: The files are case sensitive and sometimes sensitive to seemingly innocuous changes in spacing. A file with a missing or invalid [Match] statement will be applied to every interface that hasn't already been matched by an earlier configuration. FAQ: Networkd configuration files man systemd.network provides a comprehensive reference to the format of the networkd configuration files and the process for loading them. At runtime, networkd gathers files using the .network extension from several locations, including /etc/systemd/network/ . To determine the order in which to apply configuration, networkd sorts all of these files lexically. To maintain proper control over execution order, we can prepend a two digit numeric value to the filename. This allows us to set up high-numbered default configurations that are overriden on a case-by-case basis by low-numberd configs files.","title":"Configure network interfaces"},{"location":"assignments/networkd-setup/#default-ethernet-configuration","text":"/etc/systemd/network/99-eth.network [Match] # Applies to eth0, eth1, ... Name=eth* [Network] # Configure IPv4 using DHCP DHCP=ipv4 # Enable link local addresses for IPv4 (169.254.x.y) and IPv6 (FE80::) LinkLocalAddressing=yes","title":"Default ethernet configuration"},{"location":"assignments/networkd-setup/#default-wireless-configuration","text":"/etc/systemd/network/99-wlan.network [Match] Name=wlan* [Network] DHCP=ipv4","title":"Default wireless configuration"},{"location":"assignments/networkd-setup/#disable-default-networking","text":"Tip: Backup new configuration before proceeding If you've made any mistakes, you may lose access to your Pi after performing the following steps. Make an offline backup before you proceed by copying files to your local system with scp . # Disable default Raspbian networking sudo systemctl mask dhcpcd.service # Disable legacy Debian networking sudo systemctl mask networking.service # Disable resolvconf service, which manages DNS servers for the OS sudo nano /etc/resolvconf.conf # Add the line resolvconf=NO to the beginning of the file","title":"Disable default networking"},{"location":"assignments/networkd-setup/#enable-systemd-network-services","text":"# Enable systemd-networkd to replace Raspbian and Debian networking sudo systemctl enable systemd-networkd # Enable systemd-resolved to replace the resolvconf service sudo systemctl enable systemd-resolved DNS resolvers for Linux are loaded from the /etc/resolv.conf . Rather than manage this directly or through resolvconf , we want to load resolvers dynamically from systemd-resolved . This is as simple as creating a link # Set up a symbolic link from systemd-resolved resolv.conf to the system resolv.conf sudo ln -sf /run/systemd/resolve/resolv.conf /etc/resolv.conf","title":"Enable systemd network services"},{"location":"assignments/networkd-setup/#modify-wireless-startup","text":"Our original setup was driven by assumptions about dhcpcd . Before we reboot, we'll make a few brief changes to manage wpa_supplicant on an interface-by-interface basis. # Rename configuration as a per-interface file sudo mv /etc/wpa_supplicant/wpa_supplicant.conf /etc/wpa_supplicant/wpa_supplicant-wlan0.conf # Enable the wpa_supplicant service specifically for wlan0 sudo systemctl enable wpa_supplicant@wlan0 # Disable the non-interface specific service sudo systemctl disable wpa_supplicant","title":"Modify Wireless Startup"},{"location":"assignments/networkd-setup/#test-your-configuration","text":"Call sudo reboot now to reboot the Pi. Log back in and verify that your Pi is fully operational: Confirm that your wireless interface is online cat /etc/resolv.conf to confirm that it is being populated by systemd-resolved","title":"Test Your Configuration"},{"location":"assignments/networkd-setup/#troubleshooting","text":"","title":"Troubleshooting"},{"location":"assignments/networkd-setup/#general-guidance","text":"When logging back into your Pi, you may find that some of the functionality is failing. In addition to validating log files and checking that you completed all instructions, log files can provide valuable information for detecting where an error is occurring. We have already mentioned journald earlier in this guide. In order to evaluate logs that are created by journald , we make use of the journalctl command. Read up on the less utility to learn how to efficiently navigate journalctl output. # Show log messages journalctl # Include messages marked secure sudo journalctl # Show messages from last boot journalctl -k -b -1 # Show networkd messages journalctl -u systemd-networkd # Show resolved messages journalctl -u systemd-resolved # Show wpa_supplicant messages for wlan0 journalctl -u wpa_supplicant@wlan0 # Load journal from a file path journalctl -D /PATH/TO/JOURNAL_FILE # Learn more about journald man journalctl","title":"General Guidance"},{"location":"assignments/networkd-setup/#accessing-a-bricked-pi","text":"If you made a mistake at the wrong point in the previous process, you may not even be able to connect anymore from the network. The only way to debug at this point will be to attach a keyboard/monitor to the Pi or to mount the memory card from another Linux machine or VM.","title":"Accessing a Bricked Pi"},{"location":"assignments/networkd-setup/#rebuilding-raspbian","text":"Alternatively, you may opt to reflash your memory card and repeat initial setup. If you find yourself in this position, the following recommendations will simplify the process: Copy a fully configured wpa_supplicant.conf to the boot volume of the memory card before the first boot. Raspbian will move the file to the proper location in /etc/wpa_supplicant and set its permissions on the first boot. Remove the previous server key hash from .ssh/known_hosts to prevent ssh from complaining about the Pi's new key. macOS/Linux - Run ssh-keygen -R raspberrypi.local Windows - Edit $HOME\\.ssh\\known_hosts and remove the lines that reference raspberrypi.local before you attempt to connect. macOS/Linux - Run ssh-copy-id -i ~/.ssh/id_ed25519 to quickly copy your public keys into authorized_keys . Windows users will have to manually set this file up as shown in previous guides.","title":"Rebuilding Raspbian"},{"location":"assignments/pi-setup/","text":"Raspberry Pi Setup Guide (2020-01-14) \u00b6 Overview \u00b6 This guide will walk you through the steps necessary to install Raspbian on your Pi and connect it to Wifi. While we encourage you to search online and use other resources when you encounter questions, it's important that you follow our instructions closely. Though there are many different guides that can help you accomplish the same objectives, this guide has been built based on the needs and requirements of our projects and introduces you to tools you will need throughout the quarter. The core sections of this guide will walk you through the following steps: Installing Raspbian on a MicroSD and enabling SSH Updating defaults and other preliminary setup steps Configuring a wifi connection Updating Raspbian and installing additional packages with apt Before you start setting up your Pi, please review the tasks in the following section. These steps are particularly important for students running Windows and Linux. Before you start \u00b6 Everyone \u00b6 Download and install Etcher from https://etcher.io . Etcher is among the easiest options for writing a Pi OS image to a microSD. Windows Users \u00b6 Terminal \u00b6 Except when otherwise noted, I recommend that Windows users complete all Linux networking exercises within Windows PowerShell rather than Git Bash or the Command Prompt. Info For a much improved working experience, you should download the new Windows Terminal application. This app is available in the Microsoft Store or from https://github.com/microsoft/terminal/releases . By default, the terminal will run PowerShell, but it also supports Command Prompt and Windows Subsystem for Linux. Text Editor \u00b6 Among the many subtle differences between Windows and Unix-based machines is a difference in the control characters used to terminate lines in text files. In many cases, this difference will prevent Linux from parsing a file you've written and copied from Windows. To avoid this issue, install a code-oriented text editor that can be configured to use Unix-style line endings and use it exclusively for the labs and projects throughout this course. Visual Studio Code and Atom are common options. To configure VS Code to use Unix-style line endings: Open Settings Search for the term \u201cEol\u201d Change the default End-of-Line character to \\n To configure Atom to use Unix-style line endings: Open Settings Navigate to Packages / Line Ending Selector Change the Default line ending to LF Verify Support for mDNS \u00b6 Please check the full version of Windows that you have installed by running Get-ComputerInfo -Property Windows* in a PowerShell console. After a moment, you'll receive a message describing your current Windows installation (as illustrated below). WindowsBuildLabEx : 17763.1.amd64fre.rs5_release.180914-1434 WindowsCurrentVersion : 6.3 WindowsEditionId : Professional WindowsInstallationType : Client WindowsInstallDateFromRegistry : 1/10/2019 8:10:04 AM WindowsProductId : 00330-80000-00000-AA819 WindowsProductName : Windows 10 Pro WindowsRegisteredOrganization : WindowsRegisteredOwner : clementine WindowsSystemRoot : C:\\WINDOWS WindowsVersion : 1809 If the system reports that you are on Windows 10 and that the WindowsVerion is 1809 or newer, you are ready to proceed with main tutorial. Otherwise, you will need to upgrade Windows to a supported version. Linux Users \u00b6 Using your default package manager (likely yum or apt ), confirm that Avahi mDNS services are installed (mDNS is typically part of the default distribution). Install Raspbian \u00b6 The Raspberry Pi is built with Linux distributions in mind. The official distribution, which we'll use in our labs is known as Raspbian and is based on Debian Linux. If you're familiar at all with Ubuntu, you should be mostly at home working in Raspbian. Don't worry if Linux is not your jam. We'll provide plenty of guidance so that you can focus your energy on the network concepts. Write Raspbian to MicroSD \u00b6 Download a current image of Raspbian from http://www.raspberrypi.org/downloads . We will use Raspbian Buster Lite for this course. This version of Raspbian is headless, meaning that it does not include a desktop environment. We\u2019ll leverage SSH to do all of our configuration through the CLI. Use Etcher to write the image you've downloaded to a microSD. Be aware that this process will overwrite any data that was already stored on the card. Update Configuration \u00b6 Etcher will eject the microSD once the image is completely rewritten. We want to edit some files on the SD, so you will need to briefly remove the card before inserting it again. On macOS or Windows, you'll be limited to accessing the boot partition of the card. Use Explorer or Finder to locate and open the partition. You must complete the following step before the first boot. Enable SSH \u00b6 Due to security considerations, the newest versions of Raspian disable SSH by default, but it's easy to turn the feature on so that we can use it for initial setup. To enable SSH on the first boot, add an empty file named ssh to the boot volume. Instructions will vary slightly between macOS and Windows: macOS # Unix-based systems mount external storage to a path in the directory tree. For a freshly written Raspbian image, this path will be /Volumes/boot. touch /Volumes/boot/ssh Windows # Windows mounts external storage to a drive letter. Replace E: with the letter assigned on your system. New-Item -type File E : \\ ssh Raspbian will check for this file during the first startup and proceed to configure the SSH daemon to start automatically. The term daemon, by the way, is the name Unix operating systems use to describe a service that runs in the background (e.g., to respond to network requests). Initial Boot \u00b6 It's time to boot the Pi for the first time. Close your editor and any windows that are open to the microSD so that you can eject the card gracefully from your OS. Remove the microSD and insert into the card slot on your Pi. Connect power to the designated micro-USB port. Attach to your computer with an Ethernet cable and get ready to launch an SSH connection. From terminal or PowerShell, connect to the Pi for the first time by running the following command: # The default password for pi is raspberry ssh pi@raspberrypi.local This command directs your local SSH client to connect to a network host named raspberrypi.local with the username pi . Using the mDNS service, your computer will resolve the hostname to an IP address SSH will ask you to accept the connection of an unknown device before presenting you with a password prompt. $ ssh pi@raspberrypi.local The authenticity of host 'raspberrypi.local (fe80::1b9c:bcf2:acd6:bbbe%42)' can't be established. ECDSA key fingerprint is SHA256:QqhpMybvctuIxV03xcnlANU3cxWM1JhvSYxloSd69Rw. Are you sure you want to continue connecting (yes/no)? If you've previously connected to a host with the name raspberrypi.local , you may also see the warning shown below (please refer to the troubleshooting section to resolve this error): @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@ @ WARNING: REMOTE HOST IDENTIFICATION HAS CHANGED! @ @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@ IT IS POSSIBLE THAT SOMEONE IS DOING SOMETHING NASTY! If you are running Windows and receive a message that Windows cannot resolve the name raspberrypi.local , please refer to the instructions at the top of this guide. After confirming the prompt shown above, you will see another short message followed by a password prompt. Warning: Permanently added 'raspberrypi.local,fe80::1b9c:bcf2:acd6:bbbe%42' (ECDSA) to the list of known hosts. pi@raspberrypi.local's password: The default password for the pi user is raspberry . Once login is complete, you should be greeted with a message similar to that shown here. Linux raspberrypi 4.14.79-v7+ #1159 SMP Sun Nov 4 17:50:20 GMT 2018 armv7l The programs included with the Debian GNU/Linux system are free software; the exact distribution terms for each program are described in the individual files in /usr/share/doc/*/copyright. Debian GNU/Linux comes with ABSOLUTELY NO WARRANTY, to the extent permitted by applicable law. Linux raspberrypi 4.14.79-v7+ #1159 SMP Sun Nov 4 17:50:20 GMT 2018 armv7l The programs included with the Debian GNU/Linux system are free software; the exact distribution terms for each program are described in the individual files in /usr/share/doc/*/copyright. Debian GNU/Linux comes with ABSOLUTELY NO WARRANTY, to the extent permitted by applicable law. SSH is enabled and the default password for the 'pi' user has not been changed. This is a security risk - please login as the 'pi' user and type 'passwd' to set a new password. Wi-Fi is disabled because the country is not set. Use raspi-config to set the country before use. pi@raspberrypi:~ $ Choose a New Password \u00b6 Before proceeding further with setup, you should change the default password by entering the passwd at the command prompt. You will be guided through three prompts to enter the current password and then to update/confirm the new password. Danger SSH is a favorite target of malicious attackers. Nothing makes their lives easier than devices that are configured with the default password for the type of system. Default Configuration \u00b6 After you complete this step, I also recommend the following changes on every new Linux device: Setting the timezone will ensure that log messages are displayed in local time, which is quite helpful for troubleshooting. # You can see a list of timezones by running `timedatectl list-timezones` sudo timedatectl set-timezone America/Los_Angeles Raspbian defaults to a British locale. This can cause issues if we ever need to troubleshoot your device using an external keyboard. Configure the locale and keymap to prevent these issues. # Update /etc/locale.gen with your preferences sudo nano /etc/locale.gen # Find and uncomment the en_US.UTF-8 locale # Re-generate locale information after updating the locale.gen file sudo locale-gen # Apply new settings sudo localectl set-locale \"LANG=en_US.UTF-8\" sudo localectl set-keymap us Occasionally we'll end up running a program that uses the default editor settings for your profile (or root if we have run the program with sudo ). It's helpful to have these configured so that you don't end up stuck in vi or ed without any way to exit. # Update default editor selections for the pi user select-editor # Modify the same setting for commands that require root privileges. sudo select-editor Update Hostname \u00b6 At first boot, we could locate our Pi on the network based on the default hostname of raspberrypi.local . This is fine in an isolated, point-to-point network, but it's a problem when we connect to shared networks. Use the hostnamectl command to set a unique name for your device. # This little pi likes to be called Titan sudo hostnamectl set-hostname titan The main change that hostnamectl makes is visible in /etc/hostname . We also need to update references to the hostname in /etc/hosts . The hosts file is present on most Operating Systems and provides a way of defining hostname/IP address associations without relying on DNS. Linux uses this file to associate your hostname to the loopback IP address. # Confirm your hostname is up to date in /etc/hostname cat /etc/hostname # Replace any references to raspberrypi in /etc/hosts sudo nano /etc/hosts FAQ: Why is sudo slow You might notice odd warnings and sudo latency immediately after changing the hostname. These should clear up once you update the hosts file . For reasons beyond the scope of this curriculum, sudo performs DNS lookups as part of its check to determine whether the current user is permitted to elevate privileges. The delay you experience is the tool waiting for a DNS response prior to its timeout. In order for the hostname changes to take full effect, reboot your pi by calling sudo reboot now . After 20 - 30 seconds your pi will be visible with the new name -- you will need to include the .local suffix on any command referencing the name. Example # ping by MDNS hostname ping titan.local # ssh by MDNS hostname ssh pi@titan.local Enable Passwordless Login \u00b6 We can significantly simplify the process of managing our Pi\u2019s by copying our public SSH keys into the authorized_keys file of the default pi user. To prepare the Raspberry Pi, we need to create a remote directory under the pi user's home directory. If you're still logged into your pi, you can create the directory using mkdir ~/.ssh . After that is done, type exit to terminate the connection and return to your local command prompt. FAQ: Why aren't ssh and scp working Please review the previous set of instructions closely. The commands below are run from your local shell. Running them inside of an existing SSH session will not have the effect you are looking for. With the directory in place, copy your public key (most likely ~/.ssh/id_ed25519.pub ) to the pi using the scp command. scp $HOME /.ssh/id_ed25519.pub pi@raspberrypi.local:.ssh/authorized_keys Info The second set of parameters in this command specifies the user ( pi ) the host ( titan.local ) and the location of the new file ( .ssh/authorized_keys ). Like ssh , scp is a user-based tool and will be executed relative to the home directory of the authenticated user ( /home/pi ). We can override the default by specifying an absolute path beginning with a / , e.g., /home/pi/.ssh/authorized_keys . Connect to Wifi \u00b6 To complete this guide, you will need to establish Internet connectivity for your Pi. Since the Pi 3 has integrated wireless capabilities, we can solve the problem by connecting to local wifi. Configure the WPA Supplicant \u00b6 Wireless settings for the Pi are controlled by a service called wpa_supplicant , which stores network connection settings inside /etc/wpa_supplicant/wpa_supplicant.conf . You can edit this directly on the Pi using the nano text editor (or vi for the daring). Alternatively, you can create the file on your local system and copy it into place on the Pi. For this project, you must configure a connection to the Eduroam network. It's also a good idea at this time to configure connections to your home network. Warning Do not associate your Pi with University of Washington unless given direct instructions to do so. Because the network requires a browser-based login, it has been a major source of trouble for former students. Begin your wpa_supplicant.conf file with the following lines. Example country=US ctrl_interface=DIR=/var/run/wpa_supplicant GROUP=netdev update_config=1 # INSERT WPA2 ENTERPRISE CONFIG FOR EDUROAM Afterwards add one or more network blocks ( including a connection to Eduroam ). If you are new to this, there are detailed configuration instructions on how to add network blocks are available in WPA Supplicant Configuration Reference . When you are finished updating wpa_supplicant.conf reconfigure the wireless interface by calling wpa_cli -i wlan0 reconfigure . The command should return OK after a few seconds. Check that you are attached to the wireless network by calling wpa_cli -i wlan0 status . Example of what wlan0 status should print wpa_cli -i wlan0 status bssid=ac:a3:1e:eb:53:c1 freq=2462 ssid=eduroam id=0 mode=station pairwise_cipher=CCMP group_cipher=CCMP key_mgmt=WPA2/IEEE 802.1X/EAP wpa_state=COMPLETED ip_address=10.18.185.176 p2p_device_address=fa:f8:ee:8c:fe:62 address=b8:27:eb:db:fe:93 Supplicant PAE state=AUTHENTICATED suppPortStatus=Authorized EAP state=SUCCESS selectedMethod=25 (EAP-PEAP) EAP TLS cipher=ECDHE-RSA-AES256-GCM-SHA384 tls_session_reused=0 EAP-PEAPv0 Phase2 method=MSCHAPV2 eap_session_id=19865aef996591ffbd01643fbcf1b5111ef04dd3ed4f3387752c8cc0cf3b8c88b95c40bfc4915b284b3b91f60f5cb71074baaf1360d39f7a91530143dcb3c8e4ce uuid=c4adf7c1-f863-5192-8179-f5d1d2e27fd7 Testing and Troubleshooting \u00b6 In addition to wpa_cli , there are several tools that can be used to check the current state of your wireless interface and determine whether it has received a valid configuration from DHCP. # Show the current state of the wlan0 interface ip link show wlan0 3 : wlan0: <BROADCAST,MULTICAST,UP,LOWER_UP> mtu 1500 qdisc pfifo_fast state UP mode DORMANT group default qlen 1000 link/ether b8:27:eb:db:fe:93 brd ff:ff:ff:ff:ff:ff # Show address configuration for the wlan0 interface ip addr show wlan0 3 : wlan0: <BROADCAST,MULTICAST,UP,LOWER_UP> mtu 1500 qdisc pfifo_fast state UP group default qlen 1000 link/ether b8:27:eb:db:fe:93 brd ff:ff:ff:ff:ff:ff inet 10 .18.185.176/15 brd 10 .19.255.255 scope global wlan0 valid_lft forever preferred_lft forever inet6 fe80::ce14:df50:b3f0:9c2a/64 scope link valid_lft forever preferred_lft forever Update Software Packages \u00b6 Let's finalize the initial setup by checking for updates to Raspbian and its default packages (this can take a few minutes on slow networks). As a Debian based Linux distribution, Raspbian relies on apt for package management. The apt update command is used to determine whether there are new packages to download. sudo apt update sudo apt upgrade sudo apt dist-upgrade # We've found that an additional update is sometimes needed after a dist-upgrade sudo apt update # Install some useful packages while you're at it sudo apt install dnsutils Graceful Shutdown \u00b6 Never yank the power from your Pi when it's time to quit. This can lead to data corruption on the microSD (they aren't as resilient as the drives installed in your laptop). Instead, you should always issue a proper shutdown via SSH. From an SSH connection, run sudo poweroff . If you ever need to reboot the Pi, call sudo reboot now . Wait about 15 - 20 seconds to allow the Pi to complete it\u2019s shutdown process before disconnecting the power. Tips and Troubleshooting \u00b6 Can't find raspberrypi.local \u00b6 To make an initial connection with the Raspberry Pi, you need Check Network Adapters \u00b6 If you are confident that you will need to check the configuration of the Ethernet port or USB device on your local computer. Run ipconfig on Windows or ifconfig on other devices to confirm that the interface registers a network connection. The local IPv4 address for this interface should begin with 169.254.x.x (link-local address range). If you do not see a valid connection, you may need to review the next section on missing drivers. Linux Most devices will assign a Link-Local address by default when DHCP cannot be found, but some versions of Linux, e.g., Ubuntu require you to choose between link-local addressing and DHCP. If you are on Ubuntu, explore your advanced adapter settings for Ethernet to configure your adapter settings. MDNS \u00b6 Windows Make sure that you are on the latest version of Windows 10. Though mDNS is now a draft standard, Microsoft did not include a full client until the most recent versions of Windows 10 (confirmed on 1809). Support for MDNS prior to Windows 10 depends on Bonjour Print Services, an MDNS client distributed by Apple and previously bundled with iTunes and various other applications. Bonjour-related Conflicts While Bonjour was a useful tool on older versions of Windows, we suspect that it causes conflicts on versions 1803+. You can determine whether Bonjour is installed and remove it through Settings or Control Panel. Linux Linux relies on the Avahi daemon to query/respond to MDNS. Review the requirements at the beginning of this guide . Missing Network Drivers \u00b6 If you are using a USB Ethernet port for the first time on your computer, it's possible that your first attempt to connect will be unsuccessful. Many of these issues are resolved by disconnecting the USB briefly and trying after you have plugged everything back in. If issues persist, search online to determine whether your computer is missing a driver needed for the specific model of Ethernet adapter. SSH Connection Warning \u00b6 At some point, you are likely to receive the following warning when trying to launch ssh . In most cases, what you are seeing is expected behavior. @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@ @ WARNING: REMOTE HOST IDENTIFICATION HAS CHANGED! @ @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@ IT IS POSSIBLE THAT SOMEONE IS DOING SOMETHING NASTY! The first time you connect to a host, SSH will bind a cryptographic signature to the hostname, e.g., raspberrypi.local and store it within ~/.ssh/known_hosts . To prevent attacks, SSH warns us when the signature changes for a known host. In our case, it's likely that there is another explanation for the mismatched signature since SSH will create a new private key every time we set up or rebuild a Raspberry Pi. Since this is not an attack scenario, resolve the conflict with ssh-keygen -R raspberrypi.local , which will remove the existing entry. Missing features in Windows SSH The ssh-keygen -R feature isn't present before Windows 10 1809. If you are still running an older version of Windows, you will have to locate known_hosts within the .ssh configuration directory and remove the line indicated by the warning message. Permission Denied Errors \u00b6 When we're performing system and network administration, we are often in need of root privileges. Running an administrative command without the appropriate privileges will result in a permissions-related error. By default, the pi user is restricted in which parts of the system it can read and modify (Linux is heavily user-based in it's permissions model); however, the user is permitted to elevate itself to the admin level with sudo when it is necessary to perform privileged commands. As a general security precaution, don't sudo commands unless it's necessary. For now, we'll indicate when that's the case. In later tasks, you will need to make this determination on your own.","title":"Raspberry Pi Setup"},{"location":"assignments/pi-setup/#raspberry-pi-setup-guide-2020-01-14","text":"","title":"Raspberry Pi Setup Guide (2020-01-14)"},{"location":"assignments/pi-setup/#overview","text":"This guide will walk you through the steps necessary to install Raspbian on your Pi and connect it to Wifi. While we encourage you to search online and use other resources when you encounter questions, it's important that you follow our instructions closely. Though there are many different guides that can help you accomplish the same objectives, this guide has been built based on the needs and requirements of our projects and introduces you to tools you will need throughout the quarter. The core sections of this guide will walk you through the following steps: Installing Raspbian on a MicroSD and enabling SSH Updating defaults and other preliminary setup steps Configuring a wifi connection Updating Raspbian and installing additional packages with apt Before you start setting up your Pi, please review the tasks in the following section. These steps are particularly important for students running Windows and Linux.","title":"Overview"},{"location":"assignments/pi-setup/#before-you-start","text":"","title":"Before you start"},{"location":"assignments/pi-setup/#everyone","text":"Download and install Etcher from https://etcher.io . Etcher is among the easiest options for writing a Pi OS image to a microSD.","title":"Everyone"},{"location":"assignments/pi-setup/#windows-users","text":"","title":"Windows Users"},{"location":"assignments/pi-setup/#terminal","text":"Except when otherwise noted, I recommend that Windows users complete all Linux networking exercises within Windows PowerShell rather than Git Bash or the Command Prompt. Info For a much improved working experience, you should download the new Windows Terminal application. This app is available in the Microsoft Store or from https://github.com/microsoft/terminal/releases . By default, the terminal will run PowerShell, but it also supports Command Prompt and Windows Subsystem for Linux.","title":"Terminal"},{"location":"assignments/pi-setup/#text-editor","text":"Among the many subtle differences between Windows and Unix-based machines is a difference in the control characters used to terminate lines in text files. In many cases, this difference will prevent Linux from parsing a file you've written and copied from Windows. To avoid this issue, install a code-oriented text editor that can be configured to use Unix-style line endings and use it exclusively for the labs and projects throughout this course. Visual Studio Code and Atom are common options. To configure VS Code to use Unix-style line endings: Open Settings Search for the term \u201cEol\u201d Change the default End-of-Line character to \\n To configure Atom to use Unix-style line endings: Open Settings Navigate to Packages / Line Ending Selector Change the Default line ending to LF","title":"Text Editor"},{"location":"assignments/pi-setup/#verify-support-for-mdns","text":"Please check the full version of Windows that you have installed by running Get-ComputerInfo -Property Windows* in a PowerShell console. After a moment, you'll receive a message describing your current Windows installation (as illustrated below). WindowsBuildLabEx : 17763.1.amd64fre.rs5_release.180914-1434 WindowsCurrentVersion : 6.3 WindowsEditionId : Professional WindowsInstallationType : Client WindowsInstallDateFromRegistry : 1/10/2019 8:10:04 AM WindowsProductId : 00330-80000-00000-AA819 WindowsProductName : Windows 10 Pro WindowsRegisteredOrganization : WindowsRegisteredOwner : clementine WindowsSystemRoot : C:\\WINDOWS WindowsVersion : 1809 If the system reports that you are on Windows 10 and that the WindowsVerion is 1809 or newer, you are ready to proceed with main tutorial. Otherwise, you will need to upgrade Windows to a supported version.","title":"Verify Support for mDNS"},{"location":"assignments/pi-setup/#linux-users","text":"Using your default package manager (likely yum or apt ), confirm that Avahi mDNS services are installed (mDNS is typically part of the default distribution).","title":"Linux Users"},{"location":"assignments/pi-setup/#install-raspbian","text":"The Raspberry Pi is built with Linux distributions in mind. The official distribution, which we'll use in our labs is known as Raspbian and is based on Debian Linux. If you're familiar at all with Ubuntu, you should be mostly at home working in Raspbian. Don't worry if Linux is not your jam. We'll provide plenty of guidance so that you can focus your energy on the network concepts.","title":"Install Raspbian"},{"location":"assignments/pi-setup/#write-raspbian-to-microsd","text":"Download a current image of Raspbian from http://www.raspberrypi.org/downloads . We will use Raspbian Buster Lite for this course. This version of Raspbian is headless, meaning that it does not include a desktop environment. We\u2019ll leverage SSH to do all of our configuration through the CLI. Use Etcher to write the image you've downloaded to a microSD. Be aware that this process will overwrite any data that was already stored on the card.","title":"Write Raspbian to MicroSD"},{"location":"assignments/pi-setup/#update-configuration","text":"Etcher will eject the microSD once the image is completely rewritten. We want to edit some files on the SD, so you will need to briefly remove the card before inserting it again. On macOS or Windows, you'll be limited to accessing the boot partition of the card. Use Explorer or Finder to locate and open the partition. You must complete the following step before the first boot.","title":"Update Configuration"},{"location":"assignments/pi-setup/#enable-ssh","text":"Due to security considerations, the newest versions of Raspian disable SSH by default, but it's easy to turn the feature on so that we can use it for initial setup. To enable SSH on the first boot, add an empty file named ssh to the boot volume. Instructions will vary slightly between macOS and Windows: macOS # Unix-based systems mount external storage to a path in the directory tree. For a freshly written Raspbian image, this path will be /Volumes/boot. touch /Volumes/boot/ssh Windows # Windows mounts external storage to a drive letter. Replace E: with the letter assigned on your system. New-Item -type File E : \\ ssh Raspbian will check for this file during the first startup and proceed to configure the SSH daemon to start automatically. The term daemon, by the way, is the name Unix operating systems use to describe a service that runs in the background (e.g., to respond to network requests).","title":"Enable SSH"},{"location":"assignments/pi-setup/#initial-boot","text":"It's time to boot the Pi for the first time. Close your editor and any windows that are open to the microSD so that you can eject the card gracefully from your OS. Remove the microSD and insert into the card slot on your Pi. Connect power to the designated micro-USB port. Attach to your computer with an Ethernet cable and get ready to launch an SSH connection. From terminal or PowerShell, connect to the Pi for the first time by running the following command: # The default password for pi is raspberry ssh pi@raspberrypi.local This command directs your local SSH client to connect to a network host named raspberrypi.local with the username pi . Using the mDNS service, your computer will resolve the hostname to an IP address SSH will ask you to accept the connection of an unknown device before presenting you with a password prompt. $ ssh pi@raspberrypi.local The authenticity of host 'raspberrypi.local (fe80::1b9c:bcf2:acd6:bbbe%42)' can't be established. ECDSA key fingerprint is SHA256:QqhpMybvctuIxV03xcnlANU3cxWM1JhvSYxloSd69Rw. Are you sure you want to continue connecting (yes/no)? If you've previously connected to a host with the name raspberrypi.local , you may also see the warning shown below (please refer to the troubleshooting section to resolve this error): @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@ @ WARNING: REMOTE HOST IDENTIFICATION HAS CHANGED! @ @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@ IT IS POSSIBLE THAT SOMEONE IS DOING SOMETHING NASTY! If you are running Windows and receive a message that Windows cannot resolve the name raspberrypi.local , please refer to the instructions at the top of this guide. After confirming the prompt shown above, you will see another short message followed by a password prompt. Warning: Permanently added 'raspberrypi.local,fe80::1b9c:bcf2:acd6:bbbe%42' (ECDSA) to the list of known hosts. pi@raspberrypi.local's password: The default password for the pi user is raspberry . Once login is complete, you should be greeted with a message similar to that shown here. Linux raspberrypi 4.14.79-v7+ #1159 SMP Sun Nov 4 17:50:20 GMT 2018 armv7l The programs included with the Debian GNU/Linux system are free software; the exact distribution terms for each program are described in the individual files in /usr/share/doc/*/copyright. Debian GNU/Linux comes with ABSOLUTELY NO WARRANTY, to the extent permitted by applicable law. Linux raspberrypi 4.14.79-v7+ #1159 SMP Sun Nov 4 17:50:20 GMT 2018 armv7l The programs included with the Debian GNU/Linux system are free software; the exact distribution terms for each program are described in the individual files in /usr/share/doc/*/copyright. Debian GNU/Linux comes with ABSOLUTELY NO WARRANTY, to the extent permitted by applicable law. SSH is enabled and the default password for the 'pi' user has not been changed. This is a security risk - please login as the 'pi' user and type 'passwd' to set a new password. Wi-Fi is disabled because the country is not set. Use raspi-config to set the country before use. pi@raspberrypi:~ $","title":"Initial Boot"},{"location":"assignments/pi-setup/#choose-a-new-password","text":"Before proceeding further with setup, you should change the default password by entering the passwd at the command prompt. You will be guided through three prompts to enter the current password and then to update/confirm the new password. Danger SSH is a favorite target of malicious attackers. Nothing makes their lives easier than devices that are configured with the default password for the type of system.","title":"Choose a New Password"},{"location":"assignments/pi-setup/#default-configuration","text":"After you complete this step, I also recommend the following changes on every new Linux device: Setting the timezone will ensure that log messages are displayed in local time, which is quite helpful for troubleshooting. # You can see a list of timezones by running `timedatectl list-timezones` sudo timedatectl set-timezone America/Los_Angeles Raspbian defaults to a British locale. This can cause issues if we ever need to troubleshoot your device using an external keyboard. Configure the locale and keymap to prevent these issues. # Update /etc/locale.gen with your preferences sudo nano /etc/locale.gen # Find and uncomment the en_US.UTF-8 locale # Re-generate locale information after updating the locale.gen file sudo locale-gen # Apply new settings sudo localectl set-locale \"LANG=en_US.UTF-8\" sudo localectl set-keymap us Occasionally we'll end up running a program that uses the default editor settings for your profile (or root if we have run the program with sudo ). It's helpful to have these configured so that you don't end up stuck in vi or ed without any way to exit. # Update default editor selections for the pi user select-editor # Modify the same setting for commands that require root privileges. sudo select-editor","title":"Default Configuration"},{"location":"assignments/pi-setup/#update-hostname","text":"At first boot, we could locate our Pi on the network based on the default hostname of raspberrypi.local . This is fine in an isolated, point-to-point network, but it's a problem when we connect to shared networks. Use the hostnamectl command to set a unique name for your device. # This little pi likes to be called Titan sudo hostnamectl set-hostname titan The main change that hostnamectl makes is visible in /etc/hostname . We also need to update references to the hostname in /etc/hosts . The hosts file is present on most Operating Systems and provides a way of defining hostname/IP address associations without relying on DNS. Linux uses this file to associate your hostname to the loopback IP address. # Confirm your hostname is up to date in /etc/hostname cat /etc/hostname # Replace any references to raspberrypi in /etc/hosts sudo nano /etc/hosts FAQ: Why is sudo slow You might notice odd warnings and sudo latency immediately after changing the hostname. These should clear up once you update the hosts file . For reasons beyond the scope of this curriculum, sudo performs DNS lookups as part of its check to determine whether the current user is permitted to elevate privileges. The delay you experience is the tool waiting for a DNS response prior to its timeout. In order for the hostname changes to take full effect, reboot your pi by calling sudo reboot now . After 20 - 30 seconds your pi will be visible with the new name -- you will need to include the .local suffix on any command referencing the name. Example # ping by MDNS hostname ping titan.local # ssh by MDNS hostname ssh pi@titan.local","title":"Update Hostname"},{"location":"assignments/pi-setup/#enable-passwordless-login","text":"We can significantly simplify the process of managing our Pi\u2019s by copying our public SSH keys into the authorized_keys file of the default pi user. To prepare the Raspberry Pi, we need to create a remote directory under the pi user's home directory. If you're still logged into your pi, you can create the directory using mkdir ~/.ssh . After that is done, type exit to terminate the connection and return to your local command prompt. FAQ: Why aren't ssh and scp working Please review the previous set of instructions closely. The commands below are run from your local shell. Running them inside of an existing SSH session will not have the effect you are looking for. With the directory in place, copy your public key (most likely ~/.ssh/id_ed25519.pub ) to the pi using the scp command. scp $HOME /.ssh/id_ed25519.pub pi@raspberrypi.local:.ssh/authorized_keys Info The second set of parameters in this command specifies the user ( pi ) the host ( titan.local ) and the location of the new file ( .ssh/authorized_keys ). Like ssh , scp is a user-based tool and will be executed relative to the home directory of the authenticated user ( /home/pi ). We can override the default by specifying an absolute path beginning with a / , e.g., /home/pi/.ssh/authorized_keys .","title":"Enable Passwordless Login"},{"location":"assignments/pi-setup/#connect-to-wifi","text":"To complete this guide, you will need to establish Internet connectivity for your Pi. Since the Pi 3 has integrated wireless capabilities, we can solve the problem by connecting to local wifi.","title":"Connect to Wifi"},{"location":"assignments/pi-setup/#configure-the-wpa-supplicant","text":"Wireless settings for the Pi are controlled by a service called wpa_supplicant , which stores network connection settings inside /etc/wpa_supplicant/wpa_supplicant.conf . You can edit this directly on the Pi using the nano text editor (or vi for the daring). Alternatively, you can create the file on your local system and copy it into place on the Pi. For this project, you must configure a connection to the Eduroam network. It's also a good idea at this time to configure connections to your home network. Warning Do not associate your Pi with University of Washington unless given direct instructions to do so. Because the network requires a browser-based login, it has been a major source of trouble for former students. Begin your wpa_supplicant.conf file with the following lines. Example country=US ctrl_interface=DIR=/var/run/wpa_supplicant GROUP=netdev update_config=1 # INSERT WPA2 ENTERPRISE CONFIG FOR EDUROAM Afterwards add one or more network blocks ( including a connection to Eduroam ). If you are new to this, there are detailed configuration instructions on how to add network blocks are available in WPA Supplicant Configuration Reference . When you are finished updating wpa_supplicant.conf reconfigure the wireless interface by calling wpa_cli -i wlan0 reconfigure . The command should return OK after a few seconds. Check that you are attached to the wireless network by calling wpa_cli -i wlan0 status . Example of what wlan0 status should print wpa_cli -i wlan0 status bssid=ac:a3:1e:eb:53:c1 freq=2462 ssid=eduroam id=0 mode=station pairwise_cipher=CCMP group_cipher=CCMP key_mgmt=WPA2/IEEE 802.1X/EAP wpa_state=COMPLETED ip_address=10.18.185.176 p2p_device_address=fa:f8:ee:8c:fe:62 address=b8:27:eb:db:fe:93 Supplicant PAE state=AUTHENTICATED suppPortStatus=Authorized EAP state=SUCCESS selectedMethod=25 (EAP-PEAP) EAP TLS cipher=ECDHE-RSA-AES256-GCM-SHA384 tls_session_reused=0 EAP-PEAPv0 Phase2 method=MSCHAPV2 eap_session_id=19865aef996591ffbd01643fbcf1b5111ef04dd3ed4f3387752c8cc0cf3b8c88b95c40bfc4915b284b3b91f60f5cb71074baaf1360d39f7a91530143dcb3c8e4ce uuid=c4adf7c1-f863-5192-8179-f5d1d2e27fd7","title":"Configure the WPA Supplicant"},{"location":"assignments/pi-setup/#testing-and-troubleshooting","text":"In addition to wpa_cli , there are several tools that can be used to check the current state of your wireless interface and determine whether it has received a valid configuration from DHCP. # Show the current state of the wlan0 interface ip link show wlan0 3 : wlan0: <BROADCAST,MULTICAST,UP,LOWER_UP> mtu 1500 qdisc pfifo_fast state UP mode DORMANT group default qlen 1000 link/ether b8:27:eb:db:fe:93 brd ff:ff:ff:ff:ff:ff # Show address configuration for the wlan0 interface ip addr show wlan0 3 : wlan0: <BROADCAST,MULTICAST,UP,LOWER_UP> mtu 1500 qdisc pfifo_fast state UP group default qlen 1000 link/ether b8:27:eb:db:fe:93 brd ff:ff:ff:ff:ff:ff inet 10 .18.185.176/15 brd 10 .19.255.255 scope global wlan0 valid_lft forever preferred_lft forever inet6 fe80::ce14:df50:b3f0:9c2a/64 scope link valid_lft forever preferred_lft forever","title":"Testing and Troubleshooting"},{"location":"assignments/pi-setup/#update-software-packages","text":"Let's finalize the initial setup by checking for updates to Raspbian and its default packages (this can take a few minutes on slow networks). As a Debian based Linux distribution, Raspbian relies on apt for package management. The apt update command is used to determine whether there are new packages to download. sudo apt update sudo apt upgrade sudo apt dist-upgrade # We've found that an additional update is sometimes needed after a dist-upgrade sudo apt update # Install some useful packages while you're at it sudo apt install dnsutils","title":"Update Software Packages"},{"location":"assignments/pi-setup/#graceful-shutdown","text":"Never yank the power from your Pi when it's time to quit. This can lead to data corruption on the microSD (they aren't as resilient as the drives installed in your laptop). Instead, you should always issue a proper shutdown via SSH. From an SSH connection, run sudo poweroff . If you ever need to reboot the Pi, call sudo reboot now . Wait about 15 - 20 seconds to allow the Pi to complete it\u2019s shutdown process before disconnecting the power.","title":"Graceful Shutdown"},{"location":"assignments/pi-setup/#tips-and-troubleshooting","text":"","title":"Tips and Troubleshooting"},{"location":"assignments/pi-setup/#cant-find-raspberrypilocal","text":"To make an initial connection with the Raspberry Pi, you need","title":"Can't find raspberrypi.local"},{"location":"assignments/pi-setup/#check-network-adapters","text":"If you are confident that you will need to check the configuration of the Ethernet port or USB device on your local computer. Run ipconfig on Windows or ifconfig on other devices to confirm that the interface registers a network connection. The local IPv4 address for this interface should begin with 169.254.x.x (link-local address range). If you do not see a valid connection, you may need to review the next section on missing drivers. Linux Most devices will assign a Link-Local address by default when DHCP cannot be found, but some versions of Linux, e.g., Ubuntu require you to choose between link-local addressing and DHCP. If you are on Ubuntu, explore your advanced adapter settings for Ethernet to configure your adapter settings.","title":"Check Network Adapters"},{"location":"assignments/pi-setup/#mdns","text":"Windows Make sure that you are on the latest version of Windows 10. Though mDNS is now a draft standard, Microsoft did not include a full client until the most recent versions of Windows 10 (confirmed on 1809). Support for MDNS prior to Windows 10 depends on Bonjour Print Services, an MDNS client distributed by Apple and previously bundled with iTunes and various other applications. Bonjour-related Conflicts While Bonjour was a useful tool on older versions of Windows, we suspect that it causes conflicts on versions 1803+. You can determine whether Bonjour is installed and remove it through Settings or Control Panel. Linux Linux relies on the Avahi daemon to query/respond to MDNS. Review the requirements at the beginning of this guide .","title":"MDNS"},{"location":"assignments/pi-setup/#missing-network-drivers","text":"If you are using a USB Ethernet port for the first time on your computer, it's possible that your first attempt to connect will be unsuccessful. Many of these issues are resolved by disconnecting the USB briefly and trying after you have plugged everything back in. If issues persist, search online to determine whether your computer is missing a driver needed for the specific model of Ethernet adapter.","title":"Missing Network Drivers"},{"location":"assignments/pi-setup/#ssh-connection-warning","text":"At some point, you are likely to receive the following warning when trying to launch ssh . In most cases, what you are seeing is expected behavior. @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@ @ WARNING: REMOTE HOST IDENTIFICATION HAS CHANGED! @ @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@ IT IS POSSIBLE THAT SOMEONE IS DOING SOMETHING NASTY! The first time you connect to a host, SSH will bind a cryptographic signature to the hostname, e.g., raspberrypi.local and store it within ~/.ssh/known_hosts . To prevent attacks, SSH warns us when the signature changes for a known host. In our case, it's likely that there is another explanation for the mismatched signature since SSH will create a new private key every time we set up or rebuild a Raspberry Pi. Since this is not an attack scenario, resolve the conflict with ssh-keygen -R raspberrypi.local , which will remove the existing entry. Missing features in Windows SSH The ssh-keygen -R feature isn't present before Windows 10 1809. If you are still running an older version of Windows, you will have to locate known_hosts within the .ssh configuration directory and remove the line indicated by the warning message.","title":"SSH Connection Warning"},{"location":"assignments/pi-setup/#permission-denied-errors","text":"When we're performing system and network administration, we are often in need of root privileges. Running an administrative command without the appropriate privileges will result in a permissions-related error. By default, the pi user is restricted in which parts of the system it can read and modify (Linux is heavily user-based in it's permissions model); however, the user is permitted to elevate itself to the admin level with sudo when it is necessary to perform privileged commands. As a general security precaution, don't sudo commands unless it's necessary. For now, we'll indicate when that's the case. In later tasks, you will need to make this determination on your own.","title":"Permission Denied Errors"},{"location":"resources/address-planning/","text":"Basic IP Address Planning (2020-01-22) \u00b6 Don't try to build a network without a plan. A good network design is built on parameters and constraints that are appropriate for the intended use-cases. This guide offers a simple procedure that can serve as a starting point for basic planning needs. Private versus Public \u00b6 We can't pull addresses from thin air. The laws of the TCP/IP universe restrict what addresses we can use on networks we can control. Make sure that you understand where addresses come from and can distinguish between private and public address space. Private Addresses Within the boundaries of our own network, we are relatively free to set our rules as long as we use addresses that are reserved for private use. Your reference point for these addresses is RFC-1918 . Public Addresses For packets we send on the public Internet, we must use public addresses that are in our control. These addresses will either be leased (short-term or long-term reservation) to us by an ISP or allocated on a more permanent basis by a Regional Internet Registry (RIR) 1 . A contiguous group of addresses allocated in this way is referred to as a block . Configuration Strategies \u00b6 As you get started, you will need to make decisions about how you will configure devices on your network with appropriate IP addresses and network parameters. Before you proceed, make sure that you understand the following classifications. Leased Addresses As much as possible, you'll want to avoid the need for manual configuration when a new device joins the network. DHCP allows you to allocate a range of addresses that the server can use to issue address leases to hosts that request them. Leased addresses are dynamic in the sense that they aren't determined until a host joins the network and initiates the DHCP process. Static Addresses Dynamic address assignment won't work for every scenario, e.g., when an address should be fixed and a dependency on DHCP isn't possible. Some devices, including the DHCP server itself should be directly configured. We describe their addresses as static because they are coded into a network node's configuration and won't change base on external factors. DHCP Reservations Static address assignment provides a maximum degree of control when we want a device to stay at a fixed address, e.g., servers and printers, but introduces additional management cost since devices have to be configured on an individual basis. With a reservation, we can register a device based on its MAC address and ensure that DHCP serves it a pre-defined configuration when it joins the network. Procedure \u00b6 Step 1 - Examine address needs \u00b6 Determine the number of addresses required, accounting for static, reserved, and DHCP address pools. Identify additional address constraints, such as the number of distinct subnets needed or potential subnet conflicts Step 2 - Identify the base network \u00b6 Identify the base network from which you will be subnetting. If you do not have a permanent select a block from the RFC-1918 address range. Step 3 - Select subnet parameters \u00b6 Based on the inventory you conducted in step #1, determine the number of address bits that are required in order to give an address to each host on your LAN. You can use this number to determine the CIDR length and network mask for your Subnet. Given a base network and a CIDR length, choose an available subnet id for your network. 2 To complete the set of basic configuration parameters, compute the broadcast address associated with your chosen subnet ID and CIDR. Step 4 - Document important addresses and ranges \u00b6 Finally, let's connect the dots between what we've done in the first three steps by splitting your subnet up according to static, reserved, and dynamic addresses. Static addresses will usually be assigned to core network devices, e.g., a router or DHCP server, that should operate independently of DHCP. For other devices that need consistent addresses -- perhaps DNS servers or printers -- you can assign a reserved address. If you operate multiple networks, it is helpful to be consistent with your static assignments. For example, most network administrators will assign the router to either the first or last address in the subnet. Don't deviate from convention unless you have a good reason. Once you've documented your static and reserved addresses, identify a range of addresses within your subnet that can be used for the DHCP address pool. This should be a contiguous block of addresses and it cannot overlap with your a) network ID, b) subnet broadcast address, or c) static or reserved addresses that you've defined. More information about RIRs can be found at https://www.nro.net/about/rirs/ . \u21a9 The subnet ID or network prefix is the portion of the address that stays the same for all hosts on the same layer-2 network segment. \u21a9","title":"IP Address Planning Reference"},{"location":"resources/address-planning/#basic-ip-address-planning-2020-01-22","text":"Don't try to build a network without a plan. A good network design is built on parameters and constraints that are appropriate for the intended use-cases. This guide offers a simple procedure that can serve as a starting point for basic planning needs.","title":"Basic IP Address Planning (2020-01-22)"},{"location":"resources/address-planning/#private-versus-public","text":"We can't pull addresses from thin air. The laws of the TCP/IP universe restrict what addresses we can use on networks we can control. Make sure that you understand where addresses come from and can distinguish between private and public address space. Private Addresses Within the boundaries of our own network, we are relatively free to set our rules as long as we use addresses that are reserved for private use. Your reference point for these addresses is RFC-1918 . Public Addresses For packets we send on the public Internet, we must use public addresses that are in our control. These addresses will either be leased (short-term or long-term reservation) to us by an ISP or allocated on a more permanent basis by a Regional Internet Registry (RIR) 1 . A contiguous group of addresses allocated in this way is referred to as a block .","title":"Private versus Public"},{"location":"resources/address-planning/#configuration-strategies","text":"As you get started, you will need to make decisions about how you will configure devices on your network with appropriate IP addresses and network parameters. Before you proceed, make sure that you understand the following classifications. Leased Addresses As much as possible, you'll want to avoid the need for manual configuration when a new device joins the network. DHCP allows you to allocate a range of addresses that the server can use to issue address leases to hosts that request them. Leased addresses are dynamic in the sense that they aren't determined until a host joins the network and initiates the DHCP process. Static Addresses Dynamic address assignment won't work for every scenario, e.g., when an address should be fixed and a dependency on DHCP isn't possible. Some devices, including the DHCP server itself should be directly configured. We describe their addresses as static because they are coded into a network node's configuration and won't change base on external factors. DHCP Reservations Static address assignment provides a maximum degree of control when we want a device to stay at a fixed address, e.g., servers and printers, but introduces additional management cost since devices have to be configured on an individual basis. With a reservation, we can register a device based on its MAC address and ensure that DHCP serves it a pre-defined configuration when it joins the network.","title":"Configuration Strategies"},{"location":"resources/address-planning/#procedure","text":"","title":"Procedure"},{"location":"resources/address-planning/#step-1-examine-address-needs","text":"Determine the number of addresses required, accounting for static, reserved, and DHCP address pools. Identify additional address constraints, such as the number of distinct subnets needed or potential subnet conflicts","title":"Step 1 - Examine address needs"},{"location":"resources/address-planning/#step-2-identify-the-base-network","text":"Identify the base network from which you will be subnetting. If you do not have a permanent select a block from the RFC-1918 address range.","title":"Step 2 - Identify the base network"},{"location":"resources/address-planning/#step-3-select-subnet-parameters","text":"Based on the inventory you conducted in step #1, determine the number of address bits that are required in order to give an address to each host on your LAN. You can use this number to determine the CIDR length and network mask for your Subnet. Given a base network and a CIDR length, choose an available subnet id for your network. 2 To complete the set of basic configuration parameters, compute the broadcast address associated with your chosen subnet ID and CIDR.","title":"Step 3 - Select subnet parameters"},{"location":"resources/address-planning/#step-4-document-important-addresses-and-ranges","text":"Finally, let's connect the dots between what we've done in the first three steps by splitting your subnet up according to static, reserved, and dynamic addresses. Static addresses will usually be assigned to core network devices, e.g., a router or DHCP server, that should operate independently of DHCP. For other devices that need consistent addresses -- perhaps DNS servers or printers -- you can assign a reserved address. If you operate multiple networks, it is helpful to be consistent with your static assignments. For example, most network administrators will assign the router to either the first or last address in the subnet. Don't deviate from convention unless you have a good reason. Once you've documented your static and reserved addresses, identify a range of addresses within your subnet that can be used for the DHCP address pool. This should be a contiguous block of addresses and it cannot overlap with your a) network ID, b) subnet broadcast address, or c) static or reserved addresses that you've defined. More information about RIRs can be found at https://www.nro.net/about/rirs/ . \u21a9 The subnet ID or network prefix is the portion of the address that stays the same for all hosts on the same layer-2 network segment. \u21a9","title":"Step 4 - Document important addresses and ranges"},{"location":"resources/bash/","text":"Intro to Bash \u00b6 Bash command, terminal command, command line command, for the purpose of our class these all mean the same things. You should already be familiar with bash from INFO 201 and INFO 340. This following section will help you refresh some of the basics. Huh, Bash? If you feel completely lost and have never seen terminal commands we recommend watching these two videos: Beginner's Guide to the Bash Terminal Udacity Shell Workshop Directories \u00b6 cd to change directories ls to show files and directories at your current path ls -a to also show hidden files Editing files \u00b6 If you are editing a file on a remote server such as your Pi, you will not have the luxury of using a nice editor such as VS Code, Atom, or Sublime. Nevertheless, there are many powerful terminal editors. Use nano or vim to edit files through your terminal. How to edit a file that's on a linux server/your Pi: Use nano <fileName> or vim <filename> Nano is beginner friendly. If you are unfamiliar with these I recommend looking up a nano tutorial. Command documentation \u00b6 If you don't know what a command does or how to use it simply use the man command! man <commandName> will print out an documentation. Once you're done reading hit q on your keyboard to quit out. In the following screenshots I enter man nslookup which provides me with more information on what nslookup does and how it's used. Services: starting, stopping, status \u00b6 Control services by using the systemctl command. The format is sudo systemctl <action> <service name> . Example Restart NGINX service: sudo systemctl restart nginx Copying Files Across Servers with scp \u00b6 You can copy files from your laptop to a server or a server to your laptop by using scp . It uses our ssh tunnel to securely transfer your files back and forth. You can find great examples at hyperx.org . Copy all of the contents of a folder: scp -r ava/* root@157.230.163.231:/var/www/html/ This copies everything in the ava folder to the html folder. Local vs Remote \u00b6 A typical confusion for students when deadling with scp is whether their current terminal session is doing work on their local machine (your laptop), or on a remote machine (your Raspberry Pi or another server). You can tell which device your terminal session is doing work in by checking the hostname, that is whatever is after the @ symbol. Take a look at the two example tabs below. Local # hostname = macbook-pro # This tells me I'm on my laptop. ben@macbook-pro:~/Desktop/info-314/ Remote # hostname = debian-lab1 # I must be on my server now. ben@debian-lab1:~$ Logs \u00b6 Check a service's logs. This is a great way to see if it ran into any errors. If for some reason a service keeps crashing or behaving strangely you'd want to dig into its logs and see if it's unhappy with something. sudo journcalctl -u <service name> If you specifically only want to see the most recent parts of the log, you can pipe the information it gives you into the tail command, which only shows any files' ending lines. sudo journalctl -u <service name here>.service | tail -n 100","title":"Intro to Bash"},{"location":"resources/bash/#intro-to-bash","text":"Bash command, terminal command, command line command, for the purpose of our class these all mean the same things. You should already be familiar with bash from INFO 201 and INFO 340. This following section will help you refresh some of the basics. Huh, Bash? If you feel completely lost and have never seen terminal commands we recommend watching these two videos: Beginner's Guide to the Bash Terminal Udacity Shell Workshop","title":"Intro to Bash"},{"location":"resources/bash/#directories","text":"cd to change directories ls to show files and directories at your current path ls -a to also show hidden files","title":"Directories"},{"location":"resources/bash/#editing-files","text":"If you are editing a file on a remote server such as your Pi, you will not have the luxury of using a nice editor such as VS Code, Atom, or Sublime. Nevertheless, there are many powerful terminal editors. Use nano or vim to edit files through your terminal. How to edit a file that's on a linux server/your Pi: Use nano <fileName> or vim <filename> Nano is beginner friendly. If you are unfamiliar with these I recommend looking up a nano tutorial.","title":"Editing files"},{"location":"resources/bash/#command-documentation","text":"If you don't know what a command does or how to use it simply use the man command! man <commandName> will print out an documentation. Once you're done reading hit q on your keyboard to quit out. In the following screenshots I enter man nslookup which provides me with more information on what nslookup does and how it's used.","title":"Command documentation"},{"location":"resources/bash/#services-starting-stopping-status","text":"Control services by using the systemctl command. The format is sudo systemctl <action> <service name> . Example Restart NGINX service: sudo systemctl restart nginx","title":"Services: starting, stopping, status"},{"location":"resources/bash/#copying-files-across-servers-with-scp","text":"You can copy files from your laptop to a server or a server to your laptop by using scp . It uses our ssh tunnel to securely transfer your files back and forth. You can find great examples at hyperx.org . Copy all of the contents of a folder: scp -r ava/* root@157.230.163.231:/var/www/html/ This copies everything in the ava folder to the html folder.","title":"Copying Files Across Servers with scp"},{"location":"resources/bash/#local-vs-remote","text":"A typical confusion for students when deadling with scp is whether their current terminal session is doing work on their local machine (your laptop), or on a remote machine (your Raspberry Pi or another server). You can tell which device your terminal session is doing work in by checking the hostname, that is whatever is after the @ symbol. Take a look at the two example tabs below. Local # hostname = macbook-pro # This tells me I'm on my laptop. ben@macbook-pro:~/Desktop/info-314/ Remote # hostname = debian-lab1 # I must be on my server now. ben@debian-lab1:~$","title":"Local vs Remote"},{"location":"resources/bash/#logs","text":"Check a service's logs. This is a great way to see if it ran into any errors. If for some reason a service keeps crashing or behaving strangely you'd want to dig into its logs and see if it's unhappy with something. sudo journcalctl -u <service name> If you specifically only want to see the most recent parts of the log, you can pipe the information it gives you into the tail command, which only shows any files' ending lines. sudo journalctl -u <service name here>.service | tail -n 100","title":"Logs"},{"location":"resources/dns-clients/","text":"Managing DNS clients \u00b6 View or clear your local DNS cache \u00b6 As applications make DNS queries to obtain the IP addresses of remote resources, your operating system will start to maintain a cache of previous responses. These cached responses are used on subsequent lookups in order to reduce network overhead and speed up the process of loading the applicable resources. Clearing your DNS cache is an operating system dependent operation: Windows 10 \u00b6 Open PowerShell as an administrator and run clear-dnsclientcache . macOS 10.11+: \u00b6 Run sudo killall -HUP mDNSResponder from Terminal 1 . Linux \u00b6 As an open source operating system with that comes in a variety of flavors, Linux users may find that some research is necessary to determine how DNS is managed in their distribution of choice and whether the system maintains a cache that can be cleared. Linux DNS caches may be incorporated into a resolver (systemd-resolved), provided by a standalone service (nscd), or built into a name server (bind9) running on localhost. A few of the most common options are listed below, along with the relevant command to restart the service and/or clear the cache directly. Service Description Command systemd-resolved DNS Resolver (distributed with systemd) sudo systemd-resolve --flush-caches nscd DNS Cache sudo systemctl restart nscd dnsmasq Name Server sudo systemctl restart dnsmasq bind9 Name Server sudo systemctl restart bind9 dns-clean DNS Resolver (previously used by Ubuntu) /etc/init.d/dns-clean restart Perform DNS lookups manually \u00b6 At times it can be helpful to perform DNS queries manually. Tools like dig allow us to query a nameserver and ask it to provide records about a particular host or domain. These tools provide us with an enormous amount of flexibility in interacting with DNS. Installing Dig \u00b6 The dig command balances flexibility with ease of use, making it a popular tool for troubleshooting issues with DNS or performing security-related research on a domain. The utility is installed by default on macOS and some Linux distributions. Instructions are provided below if dig isn't available on your system. Linux For Debian/Ubuntu based Linux including Arch, Mint, and Raspbian, dig is part of the dnsutils package and is installed with sudo apt install dnsutils . For Fedora/RedHat based Linux including CentOS, dig is part of the bind-utils package and can be installed with sudo dnf install bind-utils -- use sudo yum install bind-utils if dnf is not available. Windows Windows users may install dig by downloading ISC BIND 9 and installing with the Tools Only option 2 . Similar functionality is also provided by the PowerShell Resolve-DnsName command. Common Usage \u00b6 dig <domain name> : Request records for the given domain name. By default dig will send a query for A records (contain IPv4 addresses) to the default name server for the system. dig <type> <domain name> : Override the type in order to obtain cname (DNS aliases for the given name), mx (mail servers), or ns name servers for the given host or domain rather than the default A record. dig @<name server IP> <domain name> : Override the system's name server (often helpful to determine if other resolvers are returning different records). Example pi@titan.local:~ $ dig @1.1.1.1 cname uw.edu ; <<>> DiG 9.10.6 <<>> @1.1.1.1 cname uw.edu ; (1 server found) ;; global options: +cmd ;; Got answer: ;; ->>HEADER<<- opcode: QUERY, status: NOERROR, id: 50713 ;; flags: qr rd ra; QUERY: 1, ANSWER: 0, AUTHORITY: 1, ADDITIONAL: 1 ;; OPT PSEUDOSECTION: ; EDNS: version: 0, flags:; udp: 1452 ;; QUESTION SECTION: ;uw.edu. IN CNAME ;; AUTHORITY SECTION: uw.edu. 600 IN SOA hanna.cac.washington.edu. domainmaster.cac.washington.edu. 2020012403 10800 1800 3600000 600 ;; Query time: 40 msec ;; SERVER: 1.1.1.1#53(1.1.1.1) ;; WHEN: Sun Jan 26 23:32:59 PST 2020 ;; MSG SIZE rcvd: 105 Resolving DNS with PowerShell \u00b6 PowerShell for Windows provides a powerful, scriptable DNS client that can be called via Resolve-DnsName . This tool replicates many of the features provided by dig, such as overriding the query type with the -type <type> option or the target server with -server <name server IP> . Run man Resolve-DnsName from PowerShell or view the online documentation to learn more about this command. Note that we are using sudo in order to perform this operation with root privileges. \u21a9 Detailed instructions provided at https://help.dyn.com/how-to-use-binds-dig-tool/ . \u21a9","title":"Managing DNS Clients"},{"location":"resources/dns-clients/#managing-dns-clients","text":"","title":"Managing DNS clients"},{"location":"resources/dns-clients/#view-or-clear-your-local-dns-cache","text":"As applications make DNS queries to obtain the IP addresses of remote resources, your operating system will start to maintain a cache of previous responses. These cached responses are used on subsequent lookups in order to reduce network overhead and speed up the process of loading the applicable resources. Clearing your DNS cache is an operating system dependent operation:","title":"View or clear your local DNS cache"},{"location":"resources/dns-clients/#windows-10","text":"Open PowerShell as an administrator and run clear-dnsclientcache .","title":"Windows 10"},{"location":"resources/dns-clients/#macos-1011","text":"Run sudo killall -HUP mDNSResponder from Terminal 1 .","title":"macOS 10.11+:"},{"location":"resources/dns-clients/#linux","text":"As an open source operating system with that comes in a variety of flavors, Linux users may find that some research is necessary to determine how DNS is managed in their distribution of choice and whether the system maintains a cache that can be cleared. Linux DNS caches may be incorporated into a resolver (systemd-resolved), provided by a standalone service (nscd), or built into a name server (bind9) running on localhost. A few of the most common options are listed below, along with the relevant command to restart the service and/or clear the cache directly. Service Description Command systemd-resolved DNS Resolver (distributed with systemd) sudo systemd-resolve --flush-caches nscd DNS Cache sudo systemctl restart nscd dnsmasq Name Server sudo systemctl restart dnsmasq bind9 Name Server sudo systemctl restart bind9 dns-clean DNS Resolver (previously used by Ubuntu) /etc/init.d/dns-clean restart","title":"Linux"},{"location":"resources/dns-clients/#perform-dns-lookups-manually","text":"At times it can be helpful to perform DNS queries manually. Tools like dig allow us to query a nameserver and ask it to provide records about a particular host or domain. These tools provide us with an enormous amount of flexibility in interacting with DNS.","title":"Perform DNS lookups manually"},{"location":"resources/dns-clients/#installing-dig","text":"The dig command balances flexibility with ease of use, making it a popular tool for troubleshooting issues with DNS or performing security-related research on a domain. The utility is installed by default on macOS and some Linux distributions. Instructions are provided below if dig isn't available on your system. Linux For Debian/Ubuntu based Linux including Arch, Mint, and Raspbian, dig is part of the dnsutils package and is installed with sudo apt install dnsutils . For Fedora/RedHat based Linux including CentOS, dig is part of the bind-utils package and can be installed with sudo dnf install bind-utils -- use sudo yum install bind-utils if dnf is not available. Windows Windows users may install dig by downloading ISC BIND 9 and installing with the Tools Only option 2 . Similar functionality is also provided by the PowerShell Resolve-DnsName command.","title":"Installing Dig"},{"location":"resources/dns-clients/#common-usage","text":"dig <domain name> : Request records for the given domain name. By default dig will send a query for A records (contain IPv4 addresses) to the default name server for the system. dig <type> <domain name> : Override the type in order to obtain cname (DNS aliases for the given name), mx (mail servers), or ns name servers for the given host or domain rather than the default A record. dig @<name server IP> <domain name> : Override the system's name server (often helpful to determine if other resolvers are returning different records). Example pi@titan.local:~ $ dig @1.1.1.1 cname uw.edu ; <<>> DiG 9.10.6 <<>> @1.1.1.1 cname uw.edu ; (1 server found) ;; global options: +cmd ;; Got answer: ;; ->>HEADER<<- opcode: QUERY, status: NOERROR, id: 50713 ;; flags: qr rd ra; QUERY: 1, ANSWER: 0, AUTHORITY: 1, ADDITIONAL: 1 ;; OPT PSEUDOSECTION: ; EDNS: version: 0, flags:; udp: 1452 ;; QUESTION SECTION: ;uw.edu. IN CNAME ;; AUTHORITY SECTION: uw.edu. 600 IN SOA hanna.cac.washington.edu. domainmaster.cac.washington.edu. 2020012403 10800 1800 3600000 600 ;; Query time: 40 msec ;; SERVER: 1.1.1.1#53(1.1.1.1) ;; WHEN: Sun Jan 26 23:32:59 PST 2020 ;; MSG SIZE rcvd: 105","title":"Common Usage"},{"location":"resources/dns-clients/#resolving-dns-with-powershell","text":"PowerShell for Windows provides a powerful, scriptable DNS client that can be called via Resolve-DnsName . This tool replicates many of the features provided by dig, such as overriding the query type with the -type <type> option or the target server with -server <name server IP> . Run man Resolve-DnsName from PowerShell or view the online documentation to learn more about this command. Note that we are using sudo in order to perform this operation with root privileges. \u21a9 Detailed instructions provided at https://help.dyn.com/how-to-use-binds-dig-tool/ . \u21a9","title":"Resolving DNS with PowerShell"},{"location":"resources/host-config/","text":"Mac/Windows/Linux Networking \u00b6 Renewing DHCP Leases \u00b6 dhcp renewal is when a dhcp client (your laptop, phone, tablet...) renews or updates its IP address configuration with the dhcp server. Often times in our homes the dhcp server is already packaged in our router source . macOS \u00b6 Important The Renew DHCP Lease button for macOS will not result in a complete DHCP Exchange. Be sure to follow the instructions below. Go to Network Preferences >> Select interface >> Advanced -> TCP/IP, Turn off IPv4 Addressing (hit OK + Apply) Return to advanced settings and enable DHCP (hit OK + Apply). Windows \u00b6 Open a command prompt Run ipconfig /release Wi-Fi to release your IP address Wait for the release command to complete and run ipconfig /renew to request a new one Linux \u00b6 Important Linux instructions will vary depending on your target distribution. You may need to search online for alternative instructions. sudo dhclient -r eth0 sudo dhclient eth0 Managing ARP Cache \u00b6 Every computer maintains a cache of associations of ARP responses that have recently appeared on the network. In order to examine ARP functionality or troubleshoot the behavior of a particular network device, you may need to flush the existing contents. Windows \u00b6 Open an Administrator Command Prompt or PowerShell Session and run arp -d Unix (MacOS) \u00b6 sudo arp -ad Linux \u00b6 For the following command, substitute the name of your own network interface for : sudo ip neigh flush dev <wlan0>","title":"Mac/Win/Linux Networking"},{"location":"resources/host-config/#macwindowslinux-networking","text":"","title":"Mac/Windows/Linux Networking"},{"location":"resources/host-config/#renewing-dhcp-leases","text":"dhcp renewal is when a dhcp client (your laptop, phone, tablet...) renews or updates its IP address configuration with the dhcp server. Often times in our homes the dhcp server is already packaged in our router source .","title":"Renewing DHCP Leases"},{"location":"resources/host-config/#macos","text":"Important The Renew DHCP Lease button for macOS will not result in a complete DHCP Exchange. Be sure to follow the instructions below. Go to Network Preferences >> Select interface >> Advanced -> TCP/IP, Turn off IPv4 Addressing (hit OK + Apply) Return to advanced settings and enable DHCP (hit OK + Apply).","title":"macOS"},{"location":"resources/host-config/#windows","text":"Open a command prompt Run ipconfig /release Wi-Fi to release your IP address Wait for the release command to complete and run ipconfig /renew to request a new one","title":"Windows"},{"location":"resources/host-config/#linux","text":"Important Linux instructions will vary depending on your target distribution. You may need to search online for alternative instructions. sudo dhclient -r eth0 sudo dhclient eth0","title":"Linux"},{"location":"resources/host-config/#managing-arp-cache","text":"Every computer maintains a cache of associations of ARP responses that have recently appeared on the network. In order to examine ARP functionality or troubleshoot the behavior of a particular network device, you may need to flush the existing contents.","title":"Managing ARP Cache"},{"location":"resources/host-config/#windows_1","text":"Open an Administrator Command Prompt or PowerShell Session and run arp -d","title":"Windows"},{"location":"resources/host-config/#unix-macos","text":"sudo arp -ad","title":"Unix (MacOS)"},{"location":"resources/host-config/#linux_1","text":"For the following command, substitute the name of your own network interface for : sudo ip neigh flush dev <wlan0>","title":"Linux"},{"location":"resources/manage-dhcp/","text":"DHCP \u00b6 DHCP advice will be updated and rolled out to this page. Reminder that the service dhcpd will handle dhcp for us. Renew dhcp lease \u00b6 Quote dhcp renewal is when a dhcp client (your laptop, phone, tablet...) renews or updates its IP address cofniguration with the dhcp server. Often times in our homes the dhcp server is already packaged in our router source . Unix (Mac OS) : This steps below are necessary since the renew button for mac os only does a shortened DHCP exchange. Go to Network Preferences >> Select interface >> Advanced -> TCP/IP, Turn off IPv4 Addressing (hit OK + Apply) Return to advanced settings and enable DHCP. Windows : Open a command prompt run ipconfig /release Wi-Fi to release your IP address then run ipconfig/renew to request a new one Linux : sudo dhclient -r eth0 sudo dhclient eth0 General Troubleshoot \u00b6 Follow the checklist below if you had dhcp previously working and it recently failed. Check DHCP errors journalctl -u isc-dhcp-server check subnet range in dhcpd.conf Check what wifi your pi is using the appropriate wifi wpa_cli -i wlan0 status Make sure both dhcpd and systemd are declaring the same statis IP for the Pi. Check your leases in at /var/lib/dhcp/dhcpd.leases Troubleshooting ISC DHCP Server \u00b6 Follow steps below if you are having trouble getting your ISC DHCP server setup for the first time. Raspbian provides us with several commands to troubleshoot and find errors related to services. Check status and recent log output using systemctl status isc-dhcp-server.service or journalctl -xe . Search the system logs for relevant errors journalctl -u isc-dhcp-server As you debug, keep the following points in mind: A misplaced space or bracket may cause DHCP to fail, so pay close attention to syntax. Your Pi will keep it's static address, so be sure that you excluded the address from the DHCP pool. Double check that you\u2019ve configured the server defaults with the correct interface names and commented out IPv6 related settings.","title":"Troubleshooting DHCP"},{"location":"resources/manage-dhcp/#dhcp","text":"DHCP advice will be updated and rolled out to this page. Reminder that the service dhcpd will handle dhcp for us.","title":"DHCP"},{"location":"resources/manage-dhcp/#renew-dhcp-lease","text":"Quote dhcp renewal is when a dhcp client (your laptop, phone, tablet...) renews or updates its IP address cofniguration with the dhcp server. Often times in our homes the dhcp server is already packaged in our router source . Unix (Mac OS) : This steps below are necessary since the renew button for mac os only does a shortened DHCP exchange. Go to Network Preferences >> Select interface >> Advanced -> TCP/IP, Turn off IPv4 Addressing (hit OK + Apply) Return to advanced settings and enable DHCP. Windows : Open a command prompt run ipconfig /release Wi-Fi to release your IP address then run ipconfig/renew to request a new one Linux : sudo dhclient -r eth0 sudo dhclient eth0","title":"Renew dhcp lease"},{"location":"resources/manage-dhcp/#general-troubleshoot","text":"Follow the checklist below if you had dhcp previously working and it recently failed. Check DHCP errors journalctl -u isc-dhcp-server check subnet range in dhcpd.conf Check what wifi your pi is using the appropriate wifi wpa_cli -i wlan0 status Make sure both dhcpd and systemd are declaring the same statis IP for the Pi. Check your leases in at /var/lib/dhcp/dhcpd.leases","title":"General Troubleshoot"},{"location":"resources/manage-dhcp/#troubleshooting-isc-dhcp-server","text":"Follow steps below if you are having trouble getting your ISC DHCP server setup for the first time. Raspbian provides us with several commands to troubleshoot and find errors related to services. Check status and recent log output using systemctl status isc-dhcp-server.service or journalctl -xe . Search the system logs for relevant errors journalctl -u isc-dhcp-server As you debug, keep the following points in mind: A misplaced space or bracket may cause DHCP to fail, so pay close attention to syntax. Your Pi will keep it's static address, so be sure that you excluded the address from the DHCP pool. Double check that you\u2019ve configured the server defaults with the correct interface names and commented out IPv6 related settings.","title":"Troubleshooting ISC DHCP Server"},{"location":"resources/markdown/","text":"Intro to Markdown \u00b6 What is Markdown? \u00b6 \"Markdown allows you to write using an easy-to-read, easy-to-write plain text format, then convert it to structurally valid XHTML (or HTML)\" source . You will be expected to use this syntax for most of your reports. Every lab you do in this course will require a lab report, and a markdown template will be provided to make your life easier. You will also find a file called README.md in the root of all of your GitHub repo folders that you will need to edit to describe your projects. How do I get started? \u00b6 Don't worry if you are unfamiliar with Markdown, it's really easy to pick up. First, let's learn the syntax required to write a document in Markdown. Github has great documentation on all of the things you can do with it here: mastering-markdown guide. Once you've taken a look at it, you can follow this interactive tutorial: markdowntutorial.com . Editors \u00b6 Now that you've got the syntax down, it's time to download and set up an editor. Most text-editing applications will work with markdown files ( .md ), but they won't allow you to preview what your document will look like with all the formatting, it will just look like plain ##text## #with# -markdown formatting . Instead, you should use an editor developed with markdown in mind. There are two options presented in this course. Option One - Standalone Editor Typora \u00b6 A simple option for an editor is Typora. Typora is a simple Markdown viewer for Windows, Mac OS X, and Linux that allows you to preview and edit your Markdown document in both a source code and presentation format. You can switch between these formats with Ctrl + / on Windows or Cmd + / on Mac. You can download Typora here (download links are at the bottom of the page). Markdown -> PDF when using Typora \u00b6 Often you will need to attach images to a lab report. Unless you want to upload multiple files (the markdown document, plus the images with exact names for markdown to find them) it is recommended that you compile your lab report into a PDF after completion and submit that. In Typora, you can do this by clicking File > Export > PDF . Option Two - Using VS Code \u00b6 A slightly more complex option is to use Visual Studio Code. This might be the best option for you if you already use VS Code to program in other languages. To use VS Code to edit markdown documents, I recommend installing a couple extensions on VS code in order to make your life easier: Markdown Preview Github and Markdown All in One . Each has instructions at the time of installation on how to use them. Markdown -> PDF when using VS Code \u00b6 Often you will need to attach images to a lab report. Unless you want to upload multiple files (the markdown document, plus the images with exact names for markdown to find them) it is recommended that you compile your lab report into a PDF after completion and submit that. If you use VS Code as a Markdown editor, you should use a command line tool such as grip to export Markdown documents to pdf. grip is a command line tool that will easily convert your markdown file to a pdf or html file. Installation instruction github.com/joeyespo/grip Usage: grip <file name>.md --export","title":"Intro to Markdown"},{"location":"resources/markdown/#intro-to-markdown","text":"","title":"Intro to Markdown"},{"location":"resources/markdown/#what-is-markdown","text":"\"Markdown allows you to write using an easy-to-read, easy-to-write plain text format, then convert it to structurally valid XHTML (or HTML)\" source . You will be expected to use this syntax for most of your reports. Every lab you do in this course will require a lab report, and a markdown template will be provided to make your life easier. You will also find a file called README.md in the root of all of your GitHub repo folders that you will need to edit to describe your projects.","title":"What is Markdown?"},{"location":"resources/markdown/#how-do-i-get-started","text":"Don't worry if you are unfamiliar with Markdown, it's really easy to pick up. First, let's learn the syntax required to write a document in Markdown. Github has great documentation on all of the things you can do with it here: mastering-markdown guide. Once you've taken a look at it, you can follow this interactive tutorial: markdowntutorial.com .","title":"How do I get started?"},{"location":"resources/markdown/#editors","text":"Now that you've got the syntax down, it's time to download and set up an editor. Most text-editing applications will work with markdown files ( .md ), but they won't allow you to preview what your document will look like with all the formatting, it will just look like plain ##text## #with# -markdown formatting . Instead, you should use an editor developed with markdown in mind. There are two options presented in this course.","title":"Editors"},{"location":"resources/markdown/#option-one-standalone-editor-typora","text":"A simple option for an editor is Typora. Typora is a simple Markdown viewer for Windows, Mac OS X, and Linux that allows you to preview and edit your Markdown document in both a source code and presentation format. You can switch between these formats with Ctrl + / on Windows or Cmd + / on Mac. You can download Typora here (download links are at the bottom of the page).","title":"Option One - Standalone Editor Typora"},{"location":"resources/markdown/#markdown-pdf-when-using-typora","text":"Often you will need to attach images to a lab report. Unless you want to upload multiple files (the markdown document, plus the images with exact names for markdown to find them) it is recommended that you compile your lab report into a PDF after completion and submit that. In Typora, you can do this by clicking File > Export > PDF .","title":"Markdown -&gt; PDF when using Typora"},{"location":"resources/markdown/#option-two-using-vs-code","text":"A slightly more complex option is to use Visual Studio Code. This might be the best option for you if you already use VS Code to program in other languages. To use VS Code to edit markdown documents, I recommend installing a couple extensions on VS code in order to make your life easier: Markdown Preview Github and Markdown All in One . Each has instructions at the time of installation on how to use them.","title":"Option Two - Using VS Code"},{"location":"resources/markdown/#markdown-pdf-when-using-vs-code","text":"Often you will need to attach images to a lab report. Unless you want to upload multiple files (the markdown document, plus the images with exact names for markdown to find them) it is recommended that you compile your lab report into a PDF after completion and submit that. If you use VS Code as a Markdown editor, you should use a command line tool such as grip to export Markdown documents to pdf. grip is a command line tool that will easily convert your markdown file to a pdf or html file. Installation instruction github.com/joeyespo/grip Usage: grip <file name>.md --export","title":"Markdown -&gt; PDF when using VS Code"},{"location":"resources/pi-materials/","text":"Buy Raspberry Pi Materials \u00b6 Order the required materials as soon as possible. What is a Pi? \u00b6 Many of the labs and exercises are built around Raspberry Pi 3 Model B/B+ hardware. The Pi is a compact, single-board computer that can be used to create a Linux-based router and other common network components. TLDR; \u00b6 Order the Raspberry Pi hardware. Instructions and links can be found at this Amazon link . Please only buy one of each category, don't buy duplicates, for example there is no need to buy two cases. Do not use or buy any model that is older than the 3B . Details \u00b6 Compute (and case) \u00b6 Either the Pi Model 3B or 3B+ will meet the requirements for this course. You may be able to complete the projects with an older Pi or other single-board computer. If you do run into issues later in the course, we should be able to provide you with a loaner to complete remaining assignments. Please talk to the instructor at the start of the quarter if this is your intention. Since the Pi ships as a bare circuit board, you\u2019ll want some sort of case to provide protection. The official case linked on my Amazon list runs about $7, but there are many other options as well. If you\u2019re feeling thrifty, you can even make something out of a heavy paper or other materials you already have (\u200b http://sixes.net/rdcHQ/mosh/raspberry.pi.b.plus.pdf \u200b). Power \u00b6 Like all computers and electronics, the Pi needs a good source of power. The specs for the power source are incredibly important. While there are plenty of USB power bricks and cables around, you need a set that will provide 5V at a minimum of 2.4A. If your equipment does not meet these specs (or you have low quality cables), you\u2019re likely to experience a lot of frustration as you work on later labs and place more demand on your Pi. We tried out all sorts of solutions in previous quarters, but the most convenient is to utilize a USB battery pack with a microUSB connector. After much searching, I came up with a couple of options that work well and can be picked up on Amazon for less than $15. Unless you understand how to verify power specifications, I recommend that you follow our recommendations. Storage \u00b6 The Pi has very simple storage requirements. It relies on a microSD card of the sort you would use in a digital camera or cell phone. We recommend an 8 - 16GB card that meets the Class 10 or UHS-1 speed specifications. Since prices move around a lot, I\u2019ve included several cards that I\u2019ve tested on the Amazon list. If you can afford it, a second storage card or a small USB flash drive may be useful. It\u2019s relatively easy to boot the Pi to a USB drive if you end up needing to troubleshoot a non-booting Pi without a monitor or keyboard.","title":"Buy Raspberry Pi Materials"},{"location":"resources/pi-materials/#buy-raspberry-pi-materials","text":"Order the required materials as soon as possible.","title":"Buy Raspberry Pi Materials"},{"location":"resources/pi-materials/#what-is-a-pi","text":"Many of the labs and exercises are built around Raspberry Pi 3 Model B/B+ hardware. The Pi is a compact, single-board computer that can be used to create a Linux-based router and other common network components.","title":"What is a Pi?"},{"location":"resources/pi-materials/#tldr","text":"Order the Raspberry Pi hardware. Instructions and links can be found at this Amazon link . Please only buy one of each category, don't buy duplicates, for example there is no need to buy two cases. Do not use or buy any model that is older than the 3B .","title":"TLDR;"},{"location":"resources/pi-materials/#details","text":"","title":"Details"},{"location":"resources/pi-materials/#compute-and-case","text":"Either the Pi Model 3B or 3B+ will meet the requirements for this course. You may be able to complete the projects with an older Pi or other single-board computer. If you do run into issues later in the course, we should be able to provide you with a loaner to complete remaining assignments. Please talk to the instructor at the start of the quarter if this is your intention. Since the Pi ships as a bare circuit board, you\u2019ll want some sort of case to provide protection. The official case linked on my Amazon list runs about $7, but there are many other options as well. If you\u2019re feeling thrifty, you can even make something out of a heavy paper or other materials you already have (\u200b http://sixes.net/rdcHQ/mosh/raspberry.pi.b.plus.pdf \u200b).","title":"Compute (and case)"},{"location":"resources/pi-materials/#power","text":"Like all computers and electronics, the Pi needs a good source of power. The specs for the power source are incredibly important. While there are plenty of USB power bricks and cables around, you need a set that will provide 5V at a minimum of 2.4A. If your equipment does not meet these specs (or you have low quality cables), you\u2019re likely to experience a lot of frustration as you work on later labs and place more demand on your Pi. We tried out all sorts of solutions in previous quarters, but the most convenient is to utilize a USB battery pack with a microUSB connector. After much searching, I came up with a couple of options that work well and can be picked up on Amazon for less than $15. Unless you understand how to verify power specifications, I recommend that you follow our recommendations.","title":"Power"},{"location":"resources/pi-materials/#storage","text":"The Pi has very simple storage requirements. It relies on a microSD card of the sort you would use in a digital camera or cell phone. We recommend an 8 - 16GB card that meets the Class 10 or UHS-1 speed specifications. Since prices move around a lot, I\u2019ve included several cards that I\u2019ve tested on the Amazon list. If you can afford it, a second storage card or a small USB flash drive may be useful. It\u2019s relatively easy to boot the Pi to a USB drive if you end up needing to troubleshoot a non-booting Pi without a monitor or keyboard.","title":"Storage"},{"location":"resources/wifi-reference/","text":"WPA Supplicant Configuration Reference (2020-01-18) \u00b6 Basic Configuration \u00b6 Wireless settings for the Pi are controlled by a service called wpa_supplicant , which stores information about known wireless networks in a text-based configuration file in /etc/wpa_supplicant/ . By default, in Raspbian, the name of this file is wpa_supplicant.conf . You may also encounter an interface-specific configuration where the interface name is appended to the file, e.g., wpa_supplicant-wlan0.conf . In both cases, the file is owned by root and requires root privileges to read or edit. Security Risk wpa_supplicant.conf is protected from casual reading due to the fact that it is a sensitive file that will likely contain your home network keys and a hash of your UW NetID password. While hashes typically provide some extra protection of a stored password, MD4 is nearly useless in this regard except with really strong passwords. Practice caution with this file: Never share the contents of this file directly online. Scrub passwords, keys, and hashes before committing a copy into a repository . Reset your password if you lose your Pi or suspect that you may have disclosed it inadvertently. You can edit wpa_supplicant configs directly on the Pi using any terminal-based text editor. Alternatively, you can create the file on your local system and copy it into place on the Pi (as described later in this guide). Warning: Windows line-endings and rich text format As students get started with Linux networking, we frequently encounter problems related to the overall file format. As a rule, the configuration files you create in this class must be plain text with standard line endings. You'll want to stick to using a code-oriented text editor, as opposed to options like macOS TextEdit and Windows Notepad that often save files as rich text rather than plain text. For Windows users, a code-oriented editor will also help you avoid issues related to line endings. While most operating systems use a simple New Line (aka Line Feed) control character to signify the end of a line, most Windows tools also include a Carriage Return . This alternate line ending causes parsing errors in many Linux tools. The general structure of the configuration file is show below. The file begins with a standard set of parameters specifying the country (needed to initialize appropriate radio settings), a control interface used by network management tools, and a boolean that instructs wpa_supplicant to accept configuration updates from other network management tools. We won't delve any deeper into the meaning of these initial parameters within this course. Rather, our concern will be how to configure Linux to join nearby wireless networks. Example wpa_supplicant.conf country=US ctrl_interface=DIR=/var/run/wpa_supplicant GROUP=netdev update_config=1 network={ ssid=\"Some public network\" key_mgmt=NONE } network={ ssid=\"My home network\" psk=\"Don't tell anyone the password\" } The contents of the network block will depend largely on the security settings of the network, e.g., whether or not the network is encrypted with a passphrase. This document provides instructions for configuring three common types of networks: Unencrypted Networks WPA2 Personal Networks (simple passphrase) WPA2 Enterprise Networks Let's start by examining the configuration for an unencrypted network. Unencrypted Networks \u00b6 All networks are defined by parameter=value pairs enclosed within network={} . Regardless of security configuration, each network block is required to contain an ssid parameter identifying the network. The service set identifier (SSID) is the network name that you see on your device when you connect to a wireless network. Since this name may include whitespace, we encapsulate it in double quotes. In addition to the ssid , wpa_supplicant expects us to provide encryption a passphrase and other encryption settings for the wireless network. Omitting these settings, even for an unencrypted network, will result in errors. Instead, for unencrypted networks, we explicitly disable encryption with key_mgmt=NONE . Configuration for an unencrypted network network={ ssid=\"Coffee Shop\" key_mgmt=NONE } WPA2 Personal Networks \u00b6 For a basic (non-enterprise) encrypted network, the configuration of the network block changes only slightly. Rather than specify the key_mgmt setting, we assign the network passphrase to the psk parameter. There are two ways to accomplish this task. First, we can assign the passphrase directly to the parameter in plaintext as shown here: Danger: Don't do this!!! network={ ssid=\"Home Wifi\" psk=\"super secret squirrels\" } Security professionals generally frown on plaintext passwords and passphrases being written to configuration files or code. As such, we prefer to write the configuration based on the raw network key (computed using a function called PBKDF in conjunction with SHA1 ). Using wpa_passphrase to generate a raw PSK You can generate the raw psk directly on your Pi by running the wpa_passphrase utility. This utility takes your SSID as an argument and then prompts you to enter your passphrase. # Pass your SSID as the first argument wpa_passphrase \"Home Wifi\" You will not see any characters or placeholders echoed as you type the passphrase, but wpa_passphrase will continue to accept input until you hit Enter/Return . The output will be a valid wpa_supplicant configuration that you can paste into your configuration. network={ ssid=\"Home Wifi\" psk=2508539ff867a3578f6ba7d9ee1d4a62aea82c25d30ffb1eb3a05cd08a373c02 } WPA2 Enterprise Networks \u00b6 Unlike home and coffee shop networks, enterprise networks like Eduroam , require a bit more setup since they authenticate individual users to the network as part of the process of establishing an encrypted connection. As such, these networks are substantially more secure than networks that are protected by WPA2 Personal . Eduroam at UW uses the NetID system to authenticate users and grant secure access to the network. Before you can join the network, you will first need to compute a hash from your NetID password. For security and privacy purposes, you will use this hash as a substitute for your password within the final configuration. Computing an MD4 hash in Linux Follow these commands in order to compute the MD4 hash in Linux. 1 The history commands are not needed to compute a hash but are added for security. Without them, your password will be stored in the Bash history file and easily readable to anyone with access to your memory card. set +o history echo -n 'This is your password' | iconv -t utf16le | openssl md4 # You should see output like 6f9bad2c90b80bd549e595fc91e27806 set -o history The following template supplies all of the parameters needed to attach to Eduroam at UW. Add it to your wpa_supplicant.conf , substituting your own NetID and password hash for the supplied values. Eduroam configuration template network={ ssid=\"eduroam\" scan_ssid=1 key_mgmt=WPA-EAP eap=PEAP identity=\"YOUR_NETID@uw.edu\" password=hash:6f9bad2c90b80bd549e595fc91e27806 phase1=\"peaplabel=0\" phase2=\"auth=MSCHAPV2\" } Applying Configuration Changes \u00b6 Like other services, wpa_supplicant will not load our changes automatically. Rather than reset the daemon completely using systemctl , we can use wpa_cli to update the configuration and perform other basic maintenance. When running wpa_cli we need to specify the interface we are configuring and a command to send to the wpa_supplicant service. Load configuration from wpa_supplicant.conf # Update configuration from disk wpa_cli -i wlan0 reconfigure # Check the status of current connection wpa_cli -i wlan0 status See man wpa_cli for further instructions and examples. The project repository includes a shell script called calc-md4-hash.sh that will compute this value for you. It can be run from macOS, Linux, and Git Bash (Windows users). To run the script, navigate to the resources path in your git repository and type ./calc-md4-hash.sh . You may also copy this file to your Pi and run it there. \u21a9","title":"Linux Wireless Reference"},{"location":"resources/wifi-reference/#wpa-supplicant-configuration-reference-2020-01-18","text":"","title":"WPA Supplicant Configuration Reference (2020-01-18)"},{"location":"resources/wifi-reference/#basic-configuration","text":"Wireless settings for the Pi are controlled by a service called wpa_supplicant , which stores information about known wireless networks in a text-based configuration file in /etc/wpa_supplicant/ . By default, in Raspbian, the name of this file is wpa_supplicant.conf . You may also encounter an interface-specific configuration where the interface name is appended to the file, e.g., wpa_supplicant-wlan0.conf . In both cases, the file is owned by root and requires root privileges to read or edit. Security Risk wpa_supplicant.conf is protected from casual reading due to the fact that it is a sensitive file that will likely contain your home network keys and a hash of your UW NetID password. While hashes typically provide some extra protection of a stored password, MD4 is nearly useless in this regard except with really strong passwords. Practice caution with this file: Never share the contents of this file directly online. Scrub passwords, keys, and hashes before committing a copy into a repository . Reset your password if you lose your Pi or suspect that you may have disclosed it inadvertently. You can edit wpa_supplicant configs directly on the Pi using any terminal-based text editor. Alternatively, you can create the file on your local system and copy it into place on the Pi (as described later in this guide). Warning: Windows line-endings and rich text format As students get started with Linux networking, we frequently encounter problems related to the overall file format. As a rule, the configuration files you create in this class must be plain text with standard line endings. You'll want to stick to using a code-oriented text editor, as opposed to options like macOS TextEdit and Windows Notepad that often save files as rich text rather than plain text. For Windows users, a code-oriented editor will also help you avoid issues related to line endings. While most operating systems use a simple New Line (aka Line Feed) control character to signify the end of a line, most Windows tools also include a Carriage Return . This alternate line ending causes parsing errors in many Linux tools. The general structure of the configuration file is show below. The file begins with a standard set of parameters specifying the country (needed to initialize appropriate radio settings), a control interface used by network management tools, and a boolean that instructs wpa_supplicant to accept configuration updates from other network management tools. We won't delve any deeper into the meaning of these initial parameters within this course. Rather, our concern will be how to configure Linux to join nearby wireless networks. Example wpa_supplicant.conf country=US ctrl_interface=DIR=/var/run/wpa_supplicant GROUP=netdev update_config=1 network={ ssid=\"Some public network\" key_mgmt=NONE } network={ ssid=\"My home network\" psk=\"Don't tell anyone the password\" } The contents of the network block will depend largely on the security settings of the network, e.g., whether or not the network is encrypted with a passphrase. This document provides instructions for configuring three common types of networks: Unencrypted Networks WPA2 Personal Networks (simple passphrase) WPA2 Enterprise Networks Let's start by examining the configuration for an unencrypted network.","title":"Basic Configuration"},{"location":"resources/wifi-reference/#unencrypted-networks","text":"All networks are defined by parameter=value pairs enclosed within network={} . Regardless of security configuration, each network block is required to contain an ssid parameter identifying the network. The service set identifier (SSID) is the network name that you see on your device when you connect to a wireless network. Since this name may include whitespace, we encapsulate it in double quotes. In addition to the ssid , wpa_supplicant expects us to provide encryption a passphrase and other encryption settings for the wireless network. Omitting these settings, even for an unencrypted network, will result in errors. Instead, for unencrypted networks, we explicitly disable encryption with key_mgmt=NONE . Configuration for an unencrypted network network={ ssid=\"Coffee Shop\" key_mgmt=NONE }","title":"Unencrypted Networks"},{"location":"resources/wifi-reference/#wpa2-personal-networks","text":"For a basic (non-enterprise) encrypted network, the configuration of the network block changes only slightly. Rather than specify the key_mgmt setting, we assign the network passphrase to the psk parameter. There are two ways to accomplish this task. First, we can assign the passphrase directly to the parameter in plaintext as shown here: Danger: Don't do this!!! network={ ssid=\"Home Wifi\" psk=\"super secret squirrels\" } Security professionals generally frown on plaintext passwords and passphrases being written to configuration files or code. As such, we prefer to write the configuration based on the raw network key (computed using a function called PBKDF in conjunction with SHA1 ). Using wpa_passphrase to generate a raw PSK You can generate the raw psk directly on your Pi by running the wpa_passphrase utility. This utility takes your SSID as an argument and then prompts you to enter your passphrase. # Pass your SSID as the first argument wpa_passphrase \"Home Wifi\" You will not see any characters or placeholders echoed as you type the passphrase, but wpa_passphrase will continue to accept input until you hit Enter/Return . The output will be a valid wpa_supplicant configuration that you can paste into your configuration. network={ ssid=\"Home Wifi\" psk=2508539ff867a3578f6ba7d9ee1d4a62aea82c25d30ffb1eb3a05cd08a373c02 }","title":"WPA2 Personal Networks"},{"location":"resources/wifi-reference/#wpa2-enterprise-networks","text":"Unlike home and coffee shop networks, enterprise networks like Eduroam , require a bit more setup since they authenticate individual users to the network as part of the process of establishing an encrypted connection. As such, these networks are substantially more secure than networks that are protected by WPA2 Personal . Eduroam at UW uses the NetID system to authenticate users and grant secure access to the network. Before you can join the network, you will first need to compute a hash from your NetID password. For security and privacy purposes, you will use this hash as a substitute for your password within the final configuration. Computing an MD4 hash in Linux Follow these commands in order to compute the MD4 hash in Linux. 1 The history commands are not needed to compute a hash but are added for security. Without them, your password will be stored in the Bash history file and easily readable to anyone with access to your memory card. set +o history echo -n 'This is your password' | iconv -t utf16le | openssl md4 # You should see output like 6f9bad2c90b80bd549e595fc91e27806 set -o history The following template supplies all of the parameters needed to attach to Eduroam at UW. Add it to your wpa_supplicant.conf , substituting your own NetID and password hash for the supplied values. Eduroam configuration template network={ ssid=\"eduroam\" scan_ssid=1 key_mgmt=WPA-EAP eap=PEAP identity=\"YOUR_NETID@uw.edu\" password=hash:6f9bad2c90b80bd549e595fc91e27806 phase1=\"peaplabel=0\" phase2=\"auth=MSCHAPV2\" }","title":"WPA2 Enterprise Networks"},{"location":"resources/wifi-reference/#applying-configuration-changes","text":"Like other services, wpa_supplicant will not load our changes automatically. Rather than reset the daemon completely using systemctl , we can use wpa_cli to update the configuration and perform other basic maintenance. When running wpa_cli we need to specify the interface we are configuring and a command to send to the wpa_supplicant service. Load configuration from wpa_supplicant.conf # Update configuration from disk wpa_cli -i wlan0 reconfigure # Check the status of current connection wpa_cli -i wlan0 status See man wpa_cli for further instructions and examples. The project repository includes a shell script called calc-md4-hash.sh that will compute this value for you. It can be run from macOS, Linux, and Git Bash (Windows users). To run the script, navigate to the resources path in your git repository and type ./calc-md4-hash.sh . You may also copy this file to your Pi and run it there. \u21a9","title":"Applying Configuration Changes"},{"location":"resources/wireshark-install/","text":"Installing WireShark \u00b6 Install WiresShark using the instructions linked below and test that you are able to run a packet capture over your current wireless connection. Instructions (macOS) \u00b6 Download the macOS installer from the WireShark download page and proceed with the instructions at: https://www.wireshark.org/docs/wsug_html_chunked/ChBuildInstallOSXInstall.html Important The latest release of WireShark shipped with a macOS specific bug that appears with a permission denied error every time the user opens a new terminal window. This is a known bug 1 in the latest installer and can be resolved by running sudo chmod 644 /etc/manpaths.d/Wireshark /etc/paths.d/Wireshark from the terminal. Instructions (Windows) \u00b6 Download the Windows installer (64-bit) from the Wireshark download page and proceed with the instructions at: https://www.wireshark.org/docs/wsug_html_chunked/ChBuildInstallWinInstall.html Instructions (Linux) \u00b6 https://www.wireshark.org/docs/wsug_html_chunked/ChBuildInstallUnixInstallBins.html https://github.com/Homebrew/homebrew-cask/issues/74548 \u21a9","title":"Install Wireshark"},{"location":"resources/wireshark-install/#installing-wireshark","text":"Install WiresShark using the instructions linked below and test that you are able to run a packet capture over your current wireless connection.","title":"Installing WireShark"},{"location":"resources/wireshark-install/#instructions-macos","text":"Download the macOS installer from the WireShark download page and proceed with the instructions at: https://www.wireshark.org/docs/wsug_html_chunked/ChBuildInstallOSXInstall.html Important The latest release of WireShark shipped with a macOS specific bug that appears with a permission denied error every time the user opens a new terminal window. This is a known bug 1 in the latest installer and can be resolved by running sudo chmod 644 /etc/manpaths.d/Wireshark /etc/paths.d/Wireshark from the terminal.","title":"Instructions (macOS)"},{"location":"resources/wireshark-install/#instructions-windows","text":"Download the Windows installer (64-bit) from the Wireshark download page and proceed with the instructions at: https://www.wireshark.org/docs/wsug_html_chunked/ChBuildInstallWinInstall.html","title":"Instructions (Windows)"},{"location":"resources/wireshark-install/#instructions-linux","text":"https://www.wireshark.org/docs/wsug_html_chunked/ChBuildInstallUnixInstallBins.html https://github.com/Homebrew/homebrew-cask/issues/74548 \u21a9","title":"Instructions (Linux)"}]}